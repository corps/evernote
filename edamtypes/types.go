// This file is automatically generated. Do not modify.

package edamtypes

import (
	"fmt"
	"strconv"
)

const (
	ClassificationRecipeServiceRecipe = "002"
	ClassificationRecipeUserNonRecipe = "000"
	ClassificationRecipeUserRecipe    = "001"
	EdamNoteSourceMailClip            = "mail.clip"
	EdamNoteSourceMailSmtpGateway     = "mail.smtp"
	EdamNoteSourceWebClip             = "web.clip"
)

type BusinessUserRole int32

const (
	BusinessUserRoleAdmin  BusinessUserRole = 1
	BusinessUserRoleNormal BusinessUserRole = 2
)

var (
	BusinessUserRoleByName = map[string]BusinessUserRole{
		"BusinessUserRole.ADMIN":  BusinessUserRoleAdmin,
		"BusinessUserRole.NORMAL": BusinessUserRoleNormal,
	}
	BusinessUserRoleByValue = map[BusinessUserRole]string{
		BusinessUserRoleAdmin:  "BusinessUserRole.ADMIN",
		BusinessUserRoleNormal: "BusinessUserRole.NORMAL",
	}
)

func (e BusinessUserRole) String() string {
	name := BusinessUserRoleByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value BusinessUserRole(%d)", e)
	}
	return name
}

func (e BusinessUserRole) MarshalJSON() ([]byte, error) {
	name := BusinessUserRoleByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *BusinessUserRole) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = BusinessUserRole(BusinessUserRoleByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = BusinessUserRole(i)
	return err
}

type NoteSortOrder int32

const (
	NoteSortOrderCreated              NoteSortOrder = 1
	NoteSortOrderRelevance            NoteSortOrder = 3
	NoteSortOrderTitle                NoteSortOrder = 5
	NoteSortOrderUpdated              NoteSortOrder = 2
	NoteSortOrderUpdateSequenceNumber NoteSortOrder = 4
)

var (
	NoteSortOrderByName = map[string]NoteSortOrder{
		"NoteSortOrder.CREATED":                NoteSortOrderCreated,
		"NoteSortOrder.RELEVANCE":              NoteSortOrderRelevance,
		"NoteSortOrder.TITLE":                  NoteSortOrderTitle,
		"NoteSortOrder.UPDATED":                NoteSortOrderUpdated,
		"NoteSortOrder.UPDATE_SEQUENCE_NUMBER": NoteSortOrderUpdateSequenceNumber,
	}
	NoteSortOrderByValue = map[NoteSortOrder]string{
		NoteSortOrderCreated:              "NoteSortOrder.CREATED",
		NoteSortOrderRelevance:            "NoteSortOrder.RELEVANCE",
		NoteSortOrderTitle:                "NoteSortOrder.TITLE",
		NoteSortOrderUpdated:              "NoteSortOrder.UPDATED",
		NoteSortOrderUpdateSequenceNumber: "NoteSortOrder.UPDATE_SEQUENCE_NUMBER",
	}
)

func (e NoteSortOrder) String() string {
	name := NoteSortOrderByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value NoteSortOrder(%d)", e)
	}
	return name
}

func (e NoteSortOrder) MarshalJSON() ([]byte, error) {
	name := NoteSortOrderByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *NoteSortOrder) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = NoteSortOrder(NoteSortOrderByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = NoteSortOrder(i)
	return err
}

type PremiumOrderStatus int32

const (
	PremiumOrderStatusActive              PremiumOrderStatus = 2
	PremiumOrderStatusCanceled            PremiumOrderStatus = 5
	PremiumOrderStatusCancellationPending PremiumOrderStatus = 4
	PremiumOrderStatusFailed              PremiumOrderStatus = 3
	PremiumOrderStatusNone                PremiumOrderStatus = 0
	PremiumOrderStatusPending             PremiumOrderStatus = 1
)

var (
	PremiumOrderStatusByName = map[string]PremiumOrderStatus{
		"PremiumOrderStatus.ACTIVE":               PremiumOrderStatusActive,
		"PremiumOrderStatus.CANCELED":             PremiumOrderStatusCanceled,
		"PremiumOrderStatus.CANCELLATION_PENDING": PremiumOrderStatusCancellationPending,
		"PremiumOrderStatus.FAILED":               PremiumOrderStatusFailed,
		"PremiumOrderStatus.NONE":                 PremiumOrderStatusNone,
		"PremiumOrderStatus.PENDING":              PremiumOrderStatusPending,
	}
	PremiumOrderStatusByValue = map[PremiumOrderStatus]string{
		PremiumOrderStatusActive:              "PremiumOrderStatus.ACTIVE",
		PremiumOrderStatusCanceled:            "PremiumOrderStatus.CANCELED",
		PremiumOrderStatusCancellationPending: "PremiumOrderStatus.CANCELLATION_PENDING",
		PremiumOrderStatusFailed:              "PremiumOrderStatus.FAILED",
		PremiumOrderStatusNone:                "PremiumOrderStatus.NONE",
		PremiumOrderStatusPending:             "PremiumOrderStatus.PENDING",
	}
)

func (e PremiumOrderStatus) String() string {
	name := PremiumOrderStatusByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value PremiumOrderStatus(%d)", e)
	}
	return name
}

func (e PremiumOrderStatus) MarshalJSON() ([]byte, error) {
	name := PremiumOrderStatusByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *PremiumOrderStatus) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = PremiumOrderStatus(PremiumOrderStatusByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = PremiumOrderStatus(i)
	return err
}

type PrivilegeLevel int32

const (
	PrivilegeLevelAdmin   PrivilegeLevel = 9
	PrivilegeLevelManager PrivilegeLevel = 7
	PrivilegeLevelNormal  PrivilegeLevel = 1
	PrivilegeLevelPremium PrivilegeLevel = 3
	PrivilegeLevelSupport PrivilegeLevel = 8
	PrivilegeLevelVip     PrivilegeLevel = 5
)

var (
	PrivilegeLevelByName = map[string]PrivilegeLevel{
		"PrivilegeLevel.ADMIN":   PrivilegeLevelAdmin,
		"PrivilegeLevel.MANAGER": PrivilegeLevelManager,
		"PrivilegeLevel.NORMAL":  PrivilegeLevelNormal,
		"PrivilegeLevel.PREMIUM": PrivilegeLevelPremium,
		"PrivilegeLevel.SUPPORT": PrivilegeLevelSupport,
		"PrivilegeLevel.VIP":     PrivilegeLevelVip,
	}
	PrivilegeLevelByValue = map[PrivilegeLevel]string{
		PrivilegeLevelAdmin:   "PrivilegeLevel.ADMIN",
		PrivilegeLevelManager: "PrivilegeLevel.MANAGER",
		PrivilegeLevelNormal:  "PrivilegeLevel.NORMAL",
		PrivilegeLevelPremium: "PrivilegeLevel.PREMIUM",
		PrivilegeLevelSupport: "PrivilegeLevel.SUPPORT",
		PrivilegeLevelVip:     "PrivilegeLevel.VIP",
	}
)

func (e PrivilegeLevel) String() string {
	name := PrivilegeLevelByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value PrivilegeLevel(%d)", e)
	}
	return name
}

func (e PrivilegeLevel) MarshalJSON() ([]byte, error) {
	name := PrivilegeLevelByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *PrivilegeLevel) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = PrivilegeLevel(PrivilegeLevelByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = PrivilegeLevel(i)
	return err
}

type QueryFormat int32

const (
	QueryFormatSexp QueryFormat = 2
	QueryFormatUser QueryFormat = 1
)

var (
	QueryFormatByName = map[string]QueryFormat{
		"QueryFormat.SEXP": QueryFormatSexp,
		"QueryFormat.USER": QueryFormatUser,
	}
	QueryFormatByValue = map[QueryFormat]string{
		QueryFormatSexp: "QueryFormat.SEXP",
		QueryFormatUser: "QueryFormat.USER",
	}
)

func (e QueryFormat) String() string {
	name := QueryFormatByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value QueryFormat(%d)", e)
	}
	return name
}

func (e QueryFormat) MarshalJSON() ([]byte, error) {
	name := QueryFormatByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *QueryFormat) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = QueryFormat(QueryFormatByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = QueryFormat(i)
	return err
}

type ReminderEmailConfig int32

const (
	ReminderEmailConfigDoNotSend      ReminderEmailConfig = 1
	ReminderEmailConfigSendDailyEmail ReminderEmailConfig = 2
)

var (
	ReminderEmailConfigByName = map[string]ReminderEmailConfig{
		"ReminderEmailConfig.DO_NOT_SEND":      ReminderEmailConfigDoNotSend,
		"ReminderEmailConfig.SEND_DAILY_EMAIL": ReminderEmailConfigSendDailyEmail,
	}
	ReminderEmailConfigByValue = map[ReminderEmailConfig]string{
		ReminderEmailConfigDoNotSend:      "ReminderEmailConfig.DO_NOT_SEND",
		ReminderEmailConfigSendDailyEmail: "ReminderEmailConfig.SEND_DAILY_EMAIL",
	}
)

func (e ReminderEmailConfig) String() string {
	name := ReminderEmailConfigByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value ReminderEmailConfig(%d)", e)
	}
	return name
}

func (e ReminderEmailConfig) MarshalJSON() ([]byte, error) {
	name := ReminderEmailConfigByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *ReminderEmailConfig) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = ReminderEmailConfig(ReminderEmailConfigByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = ReminderEmailConfig(i)
	return err
}

type SharedNotebookInstanceRestrictions int32

const (
	SharedNotebookInstanceRestrictionsNoSharedNotebooks   SharedNotebookInstanceRestrictions = 2
	SharedNotebookInstanceRestrictionsOnlyJoinedOrPreview SharedNotebookInstanceRestrictions = 1
)

var (
	SharedNotebookInstanceRestrictionsByName = map[string]SharedNotebookInstanceRestrictions{
		"SharedNotebookInstanceRestrictions.NO_SHARED_NOTEBOOKS":    SharedNotebookInstanceRestrictionsNoSharedNotebooks,
		"SharedNotebookInstanceRestrictions.ONLY_JOINED_OR_PREVIEW": SharedNotebookInstanceRestrictionsOnlyJoinedOrPreview,
	}
	SharedNotebookInstanceRestrictionsByValue = map[SharedNotebookInstanceRestrictions]string{
		SharedNotebookInstanceRestrictionsNoSharedNotebooks:   "SharedNotebookInstanceRestrictions.NO_SHARED_NOTEBOOKS",
		SharedNotebookInstanceRestrictionsOnlyJoinedOrPreview: "SharedNotebookInstanceRestrictions.ONLY_JOINED_OR_PREVIEW",
	}
)

func (e SharedNotebookInstanceRestrictions) String() string {
	name := SharedNotebookInstanceRestrictionsByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value SharedNotebookInstanceRestrictions(%d)", e)
	}
	return name
}

func (e SharedNotebookInstanceRestrictions) MarshalJSON() ([]byte, error) {
	name := SharedNotebookInstanceRestrictionsByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *SharedNotebookInstanceRestrictions) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = SharedNotebookInstanceRestrictions(SharedNotebookInstanceRestrictionsByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = SharedNotebookInstanceRestrictions(i)
	return err
}

type SharedNotebookPrivilegeLevel int32

const (
	SharedNotebookPrivilegeLevelBusinessFullAccess         SharedNotebookPrivilegeLevel = 5
	SharedNotebookPrivilegeLevelFullAccess                 SharedNotebookPrivilegeLevel = 4
	SharedNotebookPrivilegeLevelGroup                      SharedNotebookPrivilegeLevel = 3
	SharedNotebookPrivilegeLevelModifyNotebookPlusActivity SharedNotebookPrivilegeLevel = 1
	SharedNotebookPrivilegeLevelReadNotebook               SharedNotebookPrivilegeLevel = 0
	SharedNotebookPrivilegeLevelReadNotebookPlusActivity   SharedNotebookPrivilegeLevel = 2
)

var (
	SharedNotebookPrivilegeLevelByName = map[string]SharedNotebookPrivilegeLevel{
		"SharedNotebookPrivilegeLevel.BUSINESS_FULL_ACCESS":          SharedNotebookPrivilegeLevelBusinessFullAccess,
		"SharedNotebookPrivilegeLevel.FULL_ACCESS":                   SharedNotebookPrivilegeLevelFullAccess,
		"SharedNotebookPrivilegeLevel.GROUP":                         SharedNotebookPrivilegeLevelGroup,
		"SharedNotebookPrivilegeLevel.MODIFY_NOTEBOOK_PLUS_ACTIVITY": SharedNotebookPrivilegeLevelModifyNotebookPlusActivity,
		"SharedNotebookPrivilegeLevel.READ_NOTEBOOK":                 SharedNotebookPrivilegeLevelReadNotebook,
		"SharedNotebookPrivilegeLevel.READ_NOTEBOOK_PLUS_ACTIVITY":   SharedNotebookPrivilegeLevelReadNotebookPlusActivity,
	}
	SharedNotebookPrivilegeLevelByValue = map[SharedNotebookPrivilegeLevel]string{
		SharedNotebookPrivilegeLevelBusinessFullAccess:         "SharedNotebookPrivilegeLevel.BUSINESS_FULL_ACCESS",
		SharedNotebookPrivilegeLevelFullAccess:                 "SharedNotebookPrivilegeLevel.FULL_ACCESS",
		SharedNotebookPrivilegeLevelGroup:                      "SharedNotebookPrivilegeLevel.GROUP",
		SharedNotebookPrivilegeLevelModifyNotebookPlusActivity: "SharedNotebookPrivilegeLevel.MODIFY_NOTEBOOK_PLUS_ACTIVITY",
		SharedNotebookPrivilegeLevelReadNotebook:               "SharedNotebookPrivilegeLevel.READ_NOTEBOOK",
		SharedNotebookPrivilegeLevelReadNotebookPlusActivity:   "SharedNotebookPrivilegeLevel.READ_NOTEBOOK_PLUS_ACTIVITY",
	}
)

func (e SharedNotebookPrivilegeLevel) String() string {
	name := SharedNotebookPrivilegeLevelByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value SharedNotebookPrivilegeLevel(%d)", e)
	}
	return name
}

func (e SharedNotebookPrivilegeLevel) MarshalJSON() ([]byte, error) {
	name := SharedNotebookPrivilegeLevelByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *SharedNotebookPrivilegeLevel) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = SharedNotebookPrivilegeLevel(SharedNotebookPrivilegeLevelByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = SharedNotebookPrivilegeLevel(i)
	return err
}

type SponsoredGroupRole int32

const (
	SponsoredGroupRoleGroupAdmin  SponsoredGroupRole = 2
	SponsoredGroupRoleGroupMember SponsoredGroupRole = 1
	SponsoredGroupRoleGroupOwner  SponsoredGroupRole = 3
)

var (
	SponsoredGroupRoleByName = map[string]SponsoredGroupRole{
		"SponsoredGroupRole.GROUP_ADMIN":  SponsoredGroupRoleGroupAdmin,
		"SponsoredGroupRole.GROUP_MEMBER": SponsoredGroupRoleGroupMember,
		"SponsoredGroupRole.GROUP_OWNER":  SponsoredGroupRoleGroupOwner,
	}
	SponsoredGroupRoleByValue = map[SponsoredGroupRole]string{
		SponsoredGroupRoleGroupAdmin:  "SponsoredGroupRole.GROUP_ADMIN",
		SponsoredGroupRoleGroupMember: "SponsoredGroupRole.GROUP_MEMBER",
		SponsoredGroupRoleGroupOwner:  "SponsoredGroupRole.GROUP_OWNER",
	}
)

func (e SponsoredGroupRole) String() string {
	name := SponsoredGroupRoleByValue[e]
	if name == "" {
		name = fmt.Sprintf("Unknown enum value SponsoredGroupRole(%d)", e)
	}
	return name
}

func (e SponsoredGroupRole) MarshalJSON() ([]byte, error) {
	name := SponsoredGroupRoleByValue[e]
	if name == "" {
		name = strconv.Itoa(int(e))
	}
	return []byte("\"" + name + "\""), nil
}

func (e *SponsoredGroupRole) UnmarshalJSON(b []byte) error {
	st := string(b)
	if st[0] == '"' {
		*e = SponsoredGroupRole(SponsoredGroupRoleByName[st[1:len(st)-1]])
		return nil
	}
	i, err := strconv.Atoi(st)
	*e = SponsoredGroupRole(i)
	return err
}

type Accounting struct {
	UploadLimit               *int64              `thrift:"1" json:"uploadLimit,omitempty"`
	UploadLimitEnd            *int64              `thrift:"2" json:"uploadLimitEnd,omitempty"`
	UploadLimitNextMonth      *int64              `thrift:"3" json:"uploadLimitNextMonth,omitempty"`
	PremiumServiceStatus      *PremiumOrderStatus `thrift:"4" json:"premiumServiceStatus,omitempty"`
	PremiumOrderNumber        *string             `thrift:"5" json:"premiumOrderNumber,omitempty"`
	PremiumCommerceService    *string             `thrift:"6" json:"premiumCommerceService,omitempty"`
	PremiumServiceStart       *int64              `thrift:"7" json:"premiumServiceStart,omitempty"`
	PremiumServiceSKU         *string             `thrift:"8" json:"premiumServiceSKU,omitempty"`
	LastSuccessfulCharge      *int64              `thrift:"9" json:"lastSuccessfulCharge,omitempty"`
	LastFailedCharge          *int64              `thrift:"10" json:"lastFailedCharge,omitempty"`
	LastFailedChargeReason    *string             `thrift:"11" json:"lastFailedChargeReason,omitempty"`
	NextPaymentDue            *int64              `thrift:"12" json:"nextPaymentDue,omitempty"`
	PremiumLockUntil          *int64              `thrift:"13" json:"premiumLockUntil,omitempty"`
	Updated                   *int64              `thrift:"14" json:"updated,omitempty"`
	PremiumSubscriptionNumber *string             `thrift:"16" json:"premiumSubscriptionNumber,omitempty"`
	LastRequestedCharge       *int64              `thrift:"17" json:"lastRequestedCharge,omitempty"`
	Currency                  *string             `thrift:"18" json:"currency,omitempty"`
	UnitPrice                 *int32              `thrift:"19" json:"unitPrice,omitempty"`
	BusinessId                *int32              `thrift:"20" json:"businessId,omitempty"`
	BusinessName              *string             `thrift:"21" json:"businessName,omitempty"`
	BusinessRole              *BusinessUserRole   `thrift:"22" json:"businessRole,omitempty"`
	UnitDiscount              *int32              `thrift:"23" json:"unitDiscount,omitempty"`
	NextChargeDate            *int64              `thrift:"24" json:"nextChargeDate,omitempty"`
}

type BusinessNotebook struct {
	NotebookDescription *string                       `thrift:"1" json:"notebookDescription,omitempty"`
	Privilege           *SharedNotebookPrivilegeLevel `thrift:"2" json:"privilege,omitempty"`
	Recommended         *bool                         `thrift:"3" json:"recommended,omitempty"`
}

type BusinessUserInfo struct {
	BusinessId   *int32            `thrift:"1" json:"businessId,omitempty"`
	BusinessName *string           `thrift:"2" json:"businessName,omitempty"`
	Role         *BusinessUserRole `thrift:"3" json:"role,omitempty"`
	Email        *string           `thrift:"4" json:"email,omitempty"`
}

type Data struct {
	BodyHash []byte `thrift:"1" json:"bodyHash,omitempty"`
	Size     *int32 `thrift:"2" json:"size,omitempty"`
	Body     []byte `thrift:"3" json:"body,omitempty"`
}

type LazyMap struct {
	KeysOnly map[*string]struct{} `thrift:"1" json:"keysOnly,omitempty"`
	FullMap  map[*string]*string  `thrift:"2" json:"fullMap,omitempty"`
}

type LinkedNotebook struct {
	ShareName         *string `thrift:"2" json:"shareName,omitempty"`
	Username          *string `thrift:"3" json:"username,omitempty"`
	ShardId           *string `thrift:"4" json:"shardId,omitempty"`
	ShareKey          *string `thrift:"5" json:"shareKey,omitempty"`
	Uri               *string `thrift:"6" json:"uri,omitempty"`
	Guid              *string `thrift:"7" json:"guid,omitempty"`
	UpdateSequenceNum *int32  `thrift:"8" json:"updateSequenceNum,omitempty"`
	NoteStoreUrl      *string `thrift:"9" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix   *string `thrift:"10" json:"webApiUrlPrefix,omitempty"`
	Stack             *string `thrift:"11" json:"stack,omitempty"`
	BusinessId        *int32  `thrift:"12" json:"businessId,omitempty"`
}

type Note struct {
	Guid              *string         `thrift:"1" json:"guid,omitempty"`
	Title             *string         `thrift:"2" json:"title,omitempty"`
	Content           *string         `thrift:"3" json:"content,omitempty"`
	ContentHash       []byte          `thrift:"4" json:"contentHash,omitempty"`
	ContentLength     *int32          `thrift:"5" json:"contentLength,omitempty"`
	Created           *int64          `thrift:"6" json:"created,omitempty"`
	Updated           *int64          `thrift:"7" json:"updated,omitempty"`
	Deleted           *int64          `thrift:"8" json:"deleted,omitempty"`
	Active            *bool           `thrift:"9" json:"active,omitempty"`
	UpdateSequenceNum *int32          `thrift:"10" json:"updateSequenceNum,omitempty"`
	NotebookGuid      *string         `thrift:"11" json:"notebookGuid,omitempty"`
	TagGuids          []*string       `thrift:"12" json:"tagGuids,omitempty"`
	Resources         []*Resource     `thrift:"13" json:"resources,omitempty"`
	Attributes        *NoteAttributes `thrift:"14" json:"attributes,omitempty"`
	TagNames          []*string       `thrift:"15" json:"tagNames,omitempty"`
}

type NoteAttributes struct {
	SubjectDate       *int64              `thrift:"1" json:"subjectDate,omitempty"`
	Latitude          *float64            `thrift:"10" json:"latitude,omitempty"`
	Longitude         *float64            `thrift:"11" json:"longitude,omitempty"`
	Altitude          *float64            `thrift:"12" json:"altitude,omitempty"`
	Author            *string             `thrift:"13" json:"author,omitempty"`
	Source            *string             `thrift:"14" json:"source,omitempty"`
	SourceURL         *string             `thrift:"15" json:"sourceURL,omitempty"`
	SourceApplication *string             `thrift:"16" json:"sourceApplication,omitempty"`
	ShareDate         *int64              `thrift:"17" json:"shareDate,omitempty"`
	ReminderOrder     *int64              `thrift:"18" json:"reminderOrder,omitempty"`
	ReminderDoneTime  *int64              `thrift:"19" json:"reminderDoneTime,omitempty"`
	ReminderTime      *int64              `thrift:"20" json:"reminderTime,omitempty"`
	PlaceName         *string             `thrift:"21" json:"placeName,omitempty"`
	ContentClass      *string             `thrift:"22" json:"contentClass,omitempty"`
	ApplicationData   *LazyMap            `thrift:"23" json:"applicationData,omitempty"`
	LastEditedBy      *string             `thrift:"24" json:"lastEditedBy,omitempty"`
	Classifications   map[*string]*string `thrift:"26" json:"classifications,omitempty"`
	CreatorId         *int32              `thrift:"27" json:"creatorId,omitempty"`
	LastEditorId      *int32              `thrift:"28" json:"lastEditorId,omitempty"`
}

type Notebook struct {
	Guid              *string               `thrift:"1" json:"guid,omitempty"`
	Name              *string               `thrift:"2" json:"name,omitempty"`
	UpdateSequenceNum *int32                `thrift:"5" json:"updateSequenceNum,omitempty"`
	DefaultNotebook   *bool                 `thrift:"6" json:"defaultNotebook,omitempty"`
	ServiceCreated    *int64                `thrift:"7" json:"serviceCreated,omitempty"`
	ServiceUpdated    *int64                `thrift:"8" json:"serviceUpdated,omitempty"`
	Publishing        *Publishing           `thrift:"10" json:"publishing,omitempty"`
	Published         *bool                 `thrift:"11" json:"published,omitempty"`
	Stack             *string               `thrift:"12" json:"stack,omitempty"`
	SharedNotebookIds []*int64              `thrift:"13" json:"sharedNotebookIds,omitempty"`
	SharedNotebooks   []*SharedNotebook     `thrift:"14" json:"sharedNotebooks,omitempty"`
	BusinessNotebook  *BusinessNotebook     `thrift:"15" json:"businessNotebook,omitempty"`
	Contact           *User                 `thrift:"16" json:"contact,omitempty"`
	Restrictions      *NotebookRestrictions `thrift:"17" json:"restrictions,omitempty"`
}

type NotebookDescriptor struct {
	Guid                *string `thrift:"1" json:"guid,omitempty"`
	NotebookDisplayName *string `thrift:"2" json:"notebookDisplayName,omitempty"`
	ContactName         *string `thrift:"3" json:"contactName,omitempty"`
	HasSharedNotebook   *bool   `thrift:"4" json:"hasSharedNotebook,omitempty"`
	JoinedUserCount     *int32  `thrift:"5" json:"joinedUserCount,omitempty"`
}

type NotebookRestrictions struct {
	NoReadNotes                            *bool                               `thrift:"1" json:"noReadNotes,omitempty"`
	NoCreateNotes                          *bool                               `thrift:"2" json:"noCreateNotes,omitempty"`
	NoUpdateNotes                          *bool                               `thrift:"3" json:"noUpdateNotes,omitempty"`
	NoExpungeNotes                         *bool                               `thrift:"4" json:"noExpungeNotes,omitempty"`
	NoShareNotes                           *bool                               `thrift:"5" json:"noShareNotes,omitempty"`
	NoEmailNotes                           *bool                               `thrift:"6" json:"noEmailNotes,omitempty"`
	NoSendMessageToRecipients              *bool                               `thrift:"7" json:"noSendMessageToRecipients,omitempty"`
	NoUpdateNotebook                       *bool                               `thrift:"8" json:"noUpdateNotebook,omitempty"`
	NoExpungeNotebook                      *bool                               `thrift:"9" json:"noExpungeNotebook,omitempty"`
	NoSetDefaultNotebook                   *bool                               `thrift:"10" json:"noSetDefaultNotebook,omitempty"`
	NoSetNotebookStack                     *bool                               `thrift:"11" json:"noSetNotebookStack,omitempty"`
	NoPublishToPublic                      *bool                               `thrift:"12" json:"noPublishToPublic,omitempty"`
	NoPublishToBusinessLibrary             *bool                               `thrift:"13" json:"noPublishToBusinessLibrary,omitempty"`
	NoCreateTags                           *bool                               `thrift:"14" json:"noCreateTags,omitempty"`
	NoUpdateTags                           *bool                               `thrift:"15" json:"noUpdateTags,omitempty"`
	NoExpungeTags                          *bool                               `thrift:"16" json:"noExpungeTags,omitempty"`
	NoSetParentTag                         *bool                               `thrift:"17" json:"noSetParentTag,omitempty"`
	NoCreateSharedNotebooks                *bool                               `thrift:"18" json:"noCreateSharedNotebooks,omitempty"`
	UpdateWhichSharedNotebookRestrictions  *SharedNotebookInstanceRestrictions `thrift:"19" json:"updateWhichSharedNotebookRestrictions,omitempty"`
	ExpungeWhichSharedNotebookRestrictions *SharedNotebookInstanceRestrictions `thrift:"20" json:"expungeWhichSharedNotebookRestrictions,omitempty"`
}

type PremiumInfo struct {
	CurrentTime                *int64              `thrift:"1,required" json:"currentTime"`
	Premium                    *bool               `thrift:"2,required" json:"premium"`
	PremiumRecurring           *bool               `thrift:"3,required" json:"premiumRecurring"`
	PremiumExpirationDate      *int64              `thrift:"4" json:"premiumExpirationDate,omitempty"`
	PremiumExtendable          *bool               `thrift:"5,required" json:"premiumExtendable"`
	PremiumPending             *bool               `thrift:"6,required" json:"premiumPending"`
	PremiumCancellationPending *bool               `thrift:"7,required" json:"premiumCancellationPending"`
	CanPurchaseUploadAllowance *bool               `thrift:"8,required" json:"canPurchaseUploadAllowance"`
	SponsoredGroupName         *string             `thrift:"9" json:"sponsoredGroupName,omitempty"`
	SponsoredGroupRole         *SponsoredGroupRole `thrift:"10" json:"sponsoredGroupRole,omitempty"`
	PremiumUpgradable          *bool               `thrift:"11" json:"premiumUpgradable,omitempty"`
}

type Publishing struct {
	Uri               *string        `thrift:"1" json:"uri,omitempty"`
	Order             *NoteSortOrder `thrift:"2" json:"order,omitempty"`
	Ascending         *bool          `thrift:"3" json:"ascending,omitempty"`
	PublicDescription *string        `thrift:"4" json:"publicDescription,omitempty"`
}

type Resource struct {
	Guid              *string             `thrift:"1" json:"guid,omitempty"`
	NoteGuid          *string             `thrift:"2" json:"noteGuid,omitempty"`
	Data              *Data               `thrift:"3" json:"data,omitempty"`
	Mime              *string             `thrift:"4" json:"mime,omitempty"`
	Width             *int16              `thrift:"5" json:"width,omitempty"`
	Height            *int16              `thrift:"6" json:"height,omitempty"`
	Duration          *int16              `thrift:"7" json:"duration,omitempty"`
	Active            *bool               `thrift:"8" json:"active,omitempty"`
	Recognition       *Data               `thrift:"9" json:"recognition,omitempty"`
	Attributes        *ResourceAttributes `thrift:"11" json:"attributes,omitempty"`
	UpdateSequenceNum *int32              `thrift:"12" json:"updateSequenceNum,omitempty"`
	AlternateData     *Data               `thrift:"13" json:"alternateData,omitempty"`
}

type ResourceAttributes struct {
	SourceURL       *string  `thrift:"1" json:"sourceURL,omitempty"`
	Timestamp       *int64   `thrift:"2" json:"timestamp,omitempty"`
	Latitude        *float64 `thrift:"3" json:"latitude,omitempty"`
	Longitude       *float64 `thrift:"4" json:"longitude,omitempty"`
	Altitude        *float64 `thrift:"5" json:"altitude,omitempty"`
	CameraMake      *string  `thrift:"6" json:"cameraMake,omitempty"`
	CameraModel     *string  `thrift:"7" json:"cameraModel,omitempty"`
	ClientWillIndex *bool    `thrift:"8" json:"clientWillIndex,omitempty"`
	RecoType        *string  `thrift:"9" json:"recoType,omitempty"`
	FileName        *string  `thrift:"10" json:"fileName,omitempty"`
	Attachment      *bool    `thrift:"11" json:"attachment,omitempty"`
	ApplicationData *LazyMap `thrift:"12" json:"applicationData,omitempty"`
}

type SavedSearch struct {
	Guid              *string           `thrift:"1" json:"guid,omitempty"`
	Name              *string           `thrift:"2" json:"name,omitempty"`
	Query             *string           `thrift:"3" json:"query,omitempty"`
	Format            *QueryFormat      `thrift:"4" json:"format,omitempty"`
	UpdateSequenceNum *int32            `thrift:"5" json:"updateSequenceNum,omitempty"`
	Scope             *SavedSearchScope `thrift:"6" json:"scope,omitempty"`
}

type SavedSearchScope struct {
	IncludeAccount                 *bool `thrift:"1" json:"includeAccount,omitempty"`
	IncludePersonalLinkedNotebooks *bool `thrift:"2" json:"includePersonalLinkedNotebooks,omitempty"`
	IncludeBusinessLinkedNotebooks *bool `thrift:"3" json:"includeBusinessLinkedNotebooks,omitempty"`
}

type SharedNotebook struct {
	Id                 *int64                           `thrift:"1" json:"id,omitempty"`
	UserId             *int32                           `thrift:"2" json:"userId,omitempty"`
	NotebookGuid       *string                          `thrift:"3" json:"notebookGuid,omitempty"`
	Email              *string                          `thrift:"4" json:"email,omitempty"`
	NotebookModifiable *bool                            `thrift:"5" json:"notebookModifiable,omitempty"`
	RequireLogin       *bool                            `thrift:"6" json:"requireLogin,omitempty"`
	ServiceCreated     *int64                           `thrift:"7" json:"serviceCreated,omitempty"`
	ServiceUpdated     *int64                           `thrift:"10" json:"serviceUpdated,omitempty"`
	ShareKey           *string                          `thrift:"8" json:"shareKey,omitempty"`
	Username           *string                          `thrift:"9" json:"username,omitempty"`
	Privilege          *SharedNotebookPrivilegeLevel    `thrift:"11" json:"privilege,omitempty"`
	AllowPreview       *bool                            `thrift:"12" json:"allowPreview,omitempty"`
	RecipientSettings  *SharedNotebookRecipientSettings `thrift:"13" json:"recipientSettings,omitempty"`
}

type SharedNotebookRecipientSettings struct {
	ReminderNotifyEmail *bool `thrift:"1" json:"reminderNotifyEmail,omitempty"`
	ReminderNotifyInApp *bool `thrift:"2" json:"reminderNotifyInApp,omitempty"`
}

type Tag struct {
	Guid              *string `thrift:"1" json:"guid,omitempty"`
	Name              *string `thrift:"2" json:"name,omitempty"`
	ParentGuid        *string `thrift:"3" json:"parentGuid,omitempty"`
	UpdateSequenceNum *int32  `thrift:"4" json:"updateSequenceNum,omitempty"`
}

type User struct {
	Id               *int32            `thrift:"1" json:"id,omitempty"`
	Username         *string           `thrift:"2" json:"username,omitempty"`
	Email            *string           `thrift:"3" json:"email,omitempty"`
	Name             *string           `thrift:"4" json:"name,omitempty"`
	Timezone         *string           `thrift:"6" json:"timezone,omitempty"`
	Privilege        *PrivilegeLevel   `thrift:"7" json:"privilege,omitempty"`
	Created          *int64            `thrift:"9" json:"created,omitempty"`
	Updated          *int64            `thrift:"10" json:"updated,omitempty"`
	Deleted          *int64            `thrift:"11" json:"deleted,omitempty"`
	Active           *bool             `thrift:"13" json:"active,omitempty"`
	ShardId          *string           `thrift:"14" json:"shardId,omitempty"`
	Attributes       *UserAttributes   `thrift:"15" json:"attributes,omitempty"`
	Accounting       *Accounting       `thrift:"16" json:"accounting,omitempty"`
	PremiumInfo      *PremiumInfo      `thrift:"17" json:"premiumInfo,omitempty"`
	BusinessUserInfo *BusinessUserInfo `thrift:"18" json:"businessUserInfo,omitempty"`
}

type UserAttributes struct {
	DefaultLocationName        *string              `thrift:"1" json:"defaultLocationName,omitempty"`
	DefaultLatitude            *float64             `thrift:"2" json:"defaultLatitude,omitempty"`
	DefaultLongitude           *float64             `thrift:"3" json:"defaultLongitude,omitempty"`
	Preactivation              *bool                `thrift:"4" json:"preactivation,omitempty"`
	ViewedPromotions           []*string            `thrift:"5" json:"viewedPromotions,omitempty"`
	IncomingEmailAddress       *string              `thrift:"6" json:"incomingEmailAddress,omitempty"`
	RecentMailedAddresses      []*string            `thrift:"7" json:"recentMailedAddresses,omitempty"`
	Comments                   *string              `thrift:"9" json:"comments,omitempty"`
	DateAgreedToTermsOfService *int64               `thrift:"11" json:"dateAgreedToTermsOfService,omitempty"`
	MaxReferrals               *int32               `thrift:"12" json:"maxReferrals,omitempty"`
	ReferralCount              *int32               `thrift:"13" json:"referralCount,omitempty"`
	RefererCode                *string              `thrift:"14" json:"refererCode,omitempty"`
	SentEmailDate              *int64               `thrift:"15" json:"sentEmailDate,omitempty"`
	SentEmailCount             *int32               `thrift:"16" json:"sentEmailCount,omitempty"`
	DailyEmailLimit            *int32               `thrift:"17" json:"dailyEmailLimit,omitempty"`
	EmailOptOutDate            *int64               `thrift:"18" json:"emailOptOutDate,omitempty"`
	PartnerEmailOptInDate      *int64               `thrift:"19" json:"partnerEmailOptInDate,omitempty"`
	PreferredLanguage          *string              `thrift:"20" json:"preferredLanguage,omitempty"`
	PreferredCountry           *string              `thrift:"21" json:"preferredCountry,omitempty"`
	ClipFullPage               *bool                `thrift:"22" json:"clipFullPage,omitempty"`
	TwitterUserName            *string              `thrift:"23" json:"twitterUserName,omitempty"`
	TwitterId                  *string              `thrift:"24" json:"twitterId,omitempty"`
	GroupName                  *string              `thrift:"25" json:"groupName,omitempty"`
	RecognitionLanguage        *string              `thrift:"26" json:"recognitionLanguage,omitempty"`
	ReferralProof              *string              `thrift:"28" json:"referralProof,omitempty"`
	EducationalDiscount        *bool                `thrift:"29" json:"educationalDiscount,omitempty"`
	BusinessAddress            *string              `thrift:"30" json:"businessAddress,omitempty"`
	HideSponsorBilling         *bool                `thrift:"31" json:"hideSponsorBilling,omitempty"`
	TaxExempt                  *bool                `thrift:"32" json:"taxExempt,omitempty"`
	UseEmailAutoFiling         *bool                `thrift:"33" json:"useEmailAutoFiling,omitempty"`
	ReminderEmailConfig        *ReminderEmailConfig `thrift:"34" json:"reminderEmailConfig,omitempty"`
}
