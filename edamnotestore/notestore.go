// This file is automatically generated. Do not modify.

package edamnotestore

import (
	"github.com/corps/evernote/edamerrors"
	"github.com/corps/evernote/edamtypes"
	"github.com/corps/evernote/edamuserstore"
)

type ClientUsageMetrics struct {
	Sessions *int32 `thrift:"1" json:"sessions,omitempty"`
}

type NoteCollectionCounts struct {
	NotebookCounts map[*string]*int32 `thrift:"1" json:"notebookCounts,omitempty"`
	TagCounts      map[*string]*int32 `thrift:"2" json:"tagCounts,omitempty"`
	TrashCount     *int32             `thrift:"3" json:"trashCount,omitempty"`
}

type NoteEmailParameters struct {
	Guid        *string         `thrift:"1" json:"guid,omitempty"`
	Note        *edamtypes.Note `thrift:"2" json:"note,omitempty"`
	ToAddresses []*string       `thrift:"3" json:"toAddresses,omitempty"`
	CcAddresses []*string       `thrift:"4" json:"ccAddresses,omitempty"`
	Subject     *string         `thrift:"5" json:"subject,omitempty"`
	Message     *string         `thrift:"6" json:"message,omitempty"`
}

type NoteFilter struct {
	Order        *int32    `thrift:"1" json:"order,omitempty"`
	Ascending    *bool     `thrift:"2" json:"ascending,omitempty"`
	Words        *string   `thrift:"3" json:"words,omitempty"`
	NotebookGuid *string   `thrift:"4" json:"notebookGuid,omitempty"`
	TagGuids     []*string `thrift:"5" json:"tagGuids,omitempty"`
	TimeZone     *string   `thrift:"6" json:"timeZone,omitempty"`
	Inactive     *bool     `thrift:"7" json:"inactive,omitempty"`
	Emphasized   *string   `thrift:"8" json:"emphasized,omitempty"`
}

type NoteList struct {
	StartIndex    *int32            `thrift:"1,required" json:"startIndex"`
	TotalNotes    *int32            `thrift:"2,required" json:"totalNotes"`
	Notes         []*edamtypes.Note `thrift:"3,required" json:"notes"`
	StoppedWords  []*string         `thrift:"4" json:"stoppedWords,omitempty"`
	SearchedWords []*string         `thrift:"5" json:"searchedWords,omitempty"`
	UpdateCount   *int32            `thrift:"6" json:"updateCount,omitempty"`
}

type NoteMetadata struct {
	Guid                *string                   `thrift:"1,required" json:"guid"`
	Title               *string                   `thrift:"2" json:"title,omitempty"`
	ContentLength       *int32                    `thrift:"5" json:"contentLength,omitempty"`
	Created             *int64                    `thrift:"6" json:"created,omitempty"`
	Updated             *int64                    `thrift:"7" json:"updated,omitempty"`
	Deleted             *int64                    `thrift:"8" json:"deleted,omitempty"`
	UpdateSequenceNum   *int32                    `thrift:"10" json:"updateSequenceNum,omitempty"`
	NotebookGuid        *string                   `thrift:"11" json:"notebookGuid,omitempty"`
	TagGuids            []*string                 `thrift:"12" json:"tagGuids,omitempty"`
	Attributes          *edamtypes.NoteAttributes `thrift:"14" json:"attributes,omitempty"`
	LargestResourceMime *string                   `thrift:"20" json:"largestResourceMime,omitempty"`
	LargestResourceSize *int32                    `thrift:"21" json:"largestResourceSize,omitempty"`
}

type NoteVersionId struct {
	UpdateSequenceNum *int32  `thrift:"1,required" json:"updateSequenceNum"`
	Updated           *int64  `thrift:"2,required" json:"updated"`
	Saved             *int64  `thrift:"3,required" json:"saved"`
	Title             *string `thrift:"4,required" json:"title"`
}

type NotesMetadataList struct {
	StartIndex    *int32          `thrift:"1,required" json:"startIndex"`
	TotalNotes    *int32          `thrift:"2,required" json:"totalNotes"`
	Notes         []*NoteMetadata `thrift:"3,required" json:"notes"`
	StoppedWords  []*string       `thrift:"4" json:"stoppedWords,omitempty"`
	SearchedWords []*string       `thrift:"5" json:"searchedWords,omitempty"`
	UpdateCount   *int32          `thrift:"6" json:"updateCount,omitempty"`
}

type NotesMetadataResultSpec struct {
	IncludeTitle               *bool `thrift:"2" json:"includeTitle,omitempty"`
	IncludeContentLength       *bool `thrift:"5" json:"includeContentLength,omitempty"`
	IncludeCreated             *bool `thrift:"6" json:"includeCreated,omitempty"`
	IncludeUpdated             *bool `thrift:"7" json:"includeUpdated,omitempty"`
	IncludeDeleted             *bool `thrift:"8" json:"includeDeleted,omitempty"`
	IncludeUpdateSequenceNum   *bool `thrift:"10" json:"includeUpdateSequenceNum,omitempty"`
	IncludeNotebookGuid        *bool `thrift:"11" json:"includeNotebookGuid,omitempty"`
	IncludeTagGuids            *bool `thrift:"12" json:"includeTagGuids,omitempty"`
	IncludeAttributes          *bool `thrift:"14" json:"includeAttributes,omitempty"`
	IncludeLargestResourceMime *bool `thrift:"20" json:"includeLargestResourceMime,omitempty"`
	IncludeLargestResourceSize *bool `thrift:"21" json:"includeLargestResourceSize,omitempty"`
}

type RelatedQuery struct {
	NoteGuid     *string     `thrift:"1" json:"noteGuid,omitempty"`
	PlainText    *string     `thrift:"2" json:"plainText,omitempty"`
	Filter       *NoteFilter `thrift:"3" json:"filter,omitempty"`
	ReferenceUri *string     `thrift:"4" json:"referenceUri,omitempty"`
}

type RelatedResult struct {
	Notes               []*edamtypes.Note               `thrift:"1" json:"notes,omitempty"`
	Notebooks           []*edamtypes.Notebook           `thrift:"2" json:"notebooks,omitempty"`
	Tags                []*edamtypes.Tag                `thrift:"3" json:"tags,omitempty"`
	ContainingNotebooks []*edamtypes.NotebookDescriptor `thrift:"4" json:"containingNotebooks,omitempty"`
}

type RelatedResultSpec struct {
	MaxNotes                   *int32 `thrift:"1" json:"maxNotes,omitempty"`
	MaxNotebooks               *int32 `thrift:"2" json:"maxNotebooks,omitempty"`
	MaxTags                    *int32 `thrift:"3" json:"maxTags,omitempty"`
	WritableNotebooksOnly      *bool  `thrift:"4" json:"writableNotebooksOnly,omitempty"`
	IncludeContainingNotebooks *bool  `thrift:"5" json:"includeContainingNotebooks,omitempty"`
}

type SyncChunk struct {
	CurrentTime             *int64                      `thrift:"1,required" json:"currentTime"`
	ChunkHighUSN            *int32                      `thrift:"2" json:"chunkHighUSN,omitempty"`
	UpdateCount             *int32                      `thrift:"3,required" json:"updateCount"`
	Notes                   []*edamtypes.Note           `thrift:"4" json:"notes,omitempty"`
	Notebooks               []*edamtypes.Notebook       `thrift:"5" json:"notebooks,omitempty"`
	Tags                    []*edamtypes.Tag            `thrift:"6" json:"tags,omitempty"`
	Searches                []*edamtypes.SavedSearch    `thrift:"7" json:"searches,omitempty"`
	Resources               []*edamtypes.Resource       `thrift:"8" json:"resources,omitempty"`
	ExpungedNotes           []*string                   `thrift:"9" json:"expungedNotes,omitempty"`
	ExpungedNotebooks       []*string                   `thrift:"10" json:"expungedNotebooks,omitempty"`
	ExpungedTags            []*string                   `thrift:"11" json:"expungedTags,omitempty"`
	ExpungedSearches        []*string                   `thrift:"12" json:"expungedSearches,omitempty"`
	LinkedNotebooks         []*edamtypes.LinkedNotebook `thrift:"13" json:"linkedNotebooks,omitempty"`
	ExpungedLinkedNotebooks []*string                   `thrift:"14" json:"expungedLinkedNotebooks,omitempty"`
}

type SyncChunkFilter struct {
	IncludeNotes                              *bool   `thrift:"1" json:"includeNotes,omitempty"`
	IncludeNoteResources                      *bool   `thrift:"2" json:"includeNoteResources,omitempty"`
	IncludeNoteAttributes                     *bool   `thrift:"3" json:"includeNoteAttributes,omitempty"`
	IncludeNotebooks                          *bool   `thrift:"4" json:"includeNotebooks,omitempty"`
	IncludeTags                               *bool   `thrift:"5" json:"includeTags,omitempty"`
	IncludeSearches                           *bool   `thrift:"6" json:"includeSearches,omitempty"`
	IncludeResources                          *bool   `thrift:"7" json:"includeResources,omitempty"`
	IncludeLinkedNotebooks                    *bool   `thrift:"8" json:"includeLinkedNotebooks,omitempty"`
	IncludeExpunged                           *bool   `thrift:"9" json:"includeExpunged,omitempty"`
	IncludeNoteApplicationDataFullMap         *bool   `thrift:"10" json:"includeNoteApplicationDataFullMap,omitempty"`
	IncludeResourceApplicationDataFullMap     *bool   `thrift:"12" json:"includeResourceApplicationDataFullMap,omitempty"`
	IncludeNoteResourceApplicationDataFullMap *bool   `thrift:"13" json:"includeNoteResourceApplicationDataFullMap,omitempty"`
	RequireNoteContentClass                   *string `thrift:"11" json:"requireNoteContentClass,omitempty"`
}

type SyncState struct {
	CurrentTime    *int64 `thrift:"1,required" json:"currentTime"`
	FullSyncBefore *int64 `thrift:"2,required" json:"fullSyncBefore"`
	UpdateCount    *int32 `thrift:"3,required" json:"updateCount"`
	Uploaded       *int64 `thrift:"4" json:"uploaded,omitempty"`
}

type RPCClient interface {
	Call(method string, request interface{}, response interface{}) error
}

type NoteStore interface {
	AuthenticateToSharedNote(Guid *string, NoteKey *string, AuthenticationToken *string) (*edamuserstore.AuthenticationResult, error)
	AuthenticateToSharedNotebook(ShareKey *string, AuthenticationToken *string) (*edamuserstore.AuthenticationResult, error)
	CopyNote(AuthenticationToken *string, NoteGuid *string, ToNotebookGuid *string) (*edamtypes.Note, error)
	CreateLinkedNotebook(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*edamtypes.LinkedNotebook, error)
	CreateNote(AuthenticationToken *string, Note *edamtypes.Note) (*edamtypes.Note, error)
	CreateNotebook(AuthenticationToken *string, Notebook *edamtypes.Notebook) (*edamtypes.Notebook, error)
	CreateSearch(AuthenticationToken *string, Search *edamtypes.SavedSearch) (*edamtypes.SavedSearch, error)
	CreateSharedNotebook(AuthenticationToken *string, SharedNotebook *edamtypes.SharedNotebook) (*edamtypes.SharedNotebook, error)
	CreateTag(AuthenticationToken *string, Tag *edamtypes.Tag) (*edamtypes.Tag, error)
	DeleteNote(AuthenticationToken *string, Guid *string) (*int32, error)
	EmailNote(AuthenticationToken *string, Parameters *NoteEmailParameters) error
	ExpungeInactiveNotes(AuthenticationToken *string) (*int32, error)
	ExpungeLinkedNotebook(AuthenticationToken *string, Guid *string) (*int32, error)
	ExpungeNote(AuthenticationToken *string, Guid *string) (*int32, error)
	ExpungeNotebook(AuthenticationToken *string, Guid *string) (*int32, error)
	ExpungeNotes(AuthenticationToken *string, NoteGuids []*string) (*int32, error)
	ExpungeSearch(AuthenticationToken *string, Guid *string) (*int32, error)
	ExpungeSharedNotebooks(AuthenticationToken *string, SharedNotebookIds []*int64) (*int32, error)
	ExpungeTag(AuthenticationToken *string, Guid *string) (*int32, error)
	FindNoteCounts(AuthenticationToken *string, Filter *NoteFilter, WithTrash *bool) (*NoteCollectionCounts, error)
	FindNoteOffset(AuthenticationToken *string, Filter *NoteFilter, Guid *string) (*int32, error)
	FindNotes(AuthenticationToken *string, Filter *NoteFilter, Offset *int32, MaxNotes *int32) (*NoteList, error)
	FindNotesMetadata(AuthenticationToken *string, Filter *NoteFilter, Offset *int32, MaxNotes *int32, ResultSpec *NotesMetadataResultSpec) (*NotesMetadataList, error)
	FindRelated(AuthenticationToken *string, Query *RelatedQuery, ResultSpec *RelatedResultSpec) (*RelatedResult, error)
	GetDefaultNotebook(AuthenticationToken *string) (*edamtypes.Notebook, error)
	GetFilteredSyncChunk(AuthenticationToken *string, AfterUSN *int32, MaxEntries *int32, Filter *SyncChunkFilter) (*SyncChunk, error)
	GetLinkedNotebookSyncChunk(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook, AfterUSN *int32, MaxEntries *int32, FullSyncOnly *bool) (*SyncChunk, error)
	GetLinkedNotebookSyncState(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*SyncState, error)
	GetNote(AuthenticationToken *string, Guid *string, WithContent *bool, WithResourcesData *bool, WithResourcesRecognition *bool, WithResourcesAlternateData *bool) (*edamtypes.Note, error)
	GetNoteApplicationData(AuthenticationToken *string, Guid *string) (*edamtypes.LazyMap, error)
	GetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*string, error)
	GetNoteContent(AuthenticationToken *string, Guid *string) (*string, error)
	GetNoteSearchText(AuthenticationToken *string, Guid *string, NoteOnly *bool, TokenizeForIndexing *bool) (*string, error)
	GetNoteTagNames(AuthenticationToken *string, Guid *string) ([]*string, error)
	GetNoteVersion(AuthenticationToken *string, NoteGuid *string, UpdateSequenceNum *int32, WithResourcesData *bool, WithResourcesRecognition *bool, WithResourcesAlternateData *bool) (*edamtypes.Note, error)
	GetNotebook(AuthenticationToken *string, Guid *string) (*edamtypes.Notebook, error)
	GetPublicNotebook(UserId *int32, PublicUri *string) (*edamtypes.Notebook, error)
	GetResource(AuthenticationToken *string, Guid *string, WithData *bool, WithRecognition *bool, WithAttributes *bool, WithAlternateData *bool) (*edamtypes.Resource, error)
	GetResourceAlternateData(AuthenticationToken *string, Guid *string) ([]byte, error)
	GetResourceApplicationData(AuthenticationToken *string, Guid *string) (*edamtypes.LazyMap, error)
	GetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*string, error)
	GetResourceAttributes(AuthenticationToken *string, Guid *string) (*edamtypes.ResourceAttributes, error)
	GetResourceByHash(AuthenticationToken *string, NoteGuid *string, ContentHash []byte, WithData *bool, WithRecognition *bool, WithAlternateData *bool) (*edamtypes.Resource, error)
	GetResourceData(AuthenticationToken *string, Guid *string) ([]byte, error)
	GetResourceRecognition(AuthenticationToken *string, Guid *string) ([]byte, error)
	GetResourceSearchText(AuthenticationToken *string, Guid *string) (*string, error)
	GetSearch(AuthenticationToken *string, Guid *string) (*edamtypes.SavedSearch, error)
	GetSharedNotebookByAuth(AuthenticationToken *string) (*edamtypes.SharedNotebook, error)
	GetSyncChunk(AuthenticationToken *string, AfterUSN *int32, MaxEntries *int32, FullSyncOnly *bool) (*SyncChunk, error)
	GetSyncState(AuthenticationToken *string) (*SyncState, error)
	GetSyncStateWithMetrics(AuthenticationToken *string, ClientMetrics *ClientUsageMetrics) (*SyncState, error)
	GetTag(AuthenticationToken *string, Guid *string) (*edamtypes.Tag, error)
	ListLinkedNotebooks(AuthenticationToken *string) ([]*edamtypes.LinkedNotebook, error)
	ListNoteVersions(AuthenticationToken *string, NoteGuid *string) ([]*NoteVersionId, error)
	ListNotebooks(AuthenticationToken *string) ([]*edamtypes.Notebook, error)
	ListSearches(AuthenticationToken *string) ([]*edamtypes.SavedSearch, error)
	ListSharedNotebooks(AuthenticationToken *string) ([]*edamtypes.SharedNotebook, error)
	ListTags(AuthenticationToken *string) ([]*edamtypes.Tag, error)
	ListTagsByNotebook(AuthenticationToken *string, NotebookGuid *string) ([]*edamtypes.Tag, error)
	SendMessageToSharedNotebookMembers(AuthenticationToken *string, NotebookGuid *string, MessageText *string, Recipients []*string) (*int32, error)
	SetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string, Value *string) (*int32, error)
	SetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string, Value *string) (*int32, error)
	SetSharedNotebookRecipientSettings(AuthenticationToken *string, SharedNotebookId *int64, RecipientSettings *edamtypes.SharedNotebookRecipientSettings) (*int32, error)
	ShareNote(AuthenticationToken *string, Guid *string) (*string, error)
	StopSharingNote(AuthenticationToken *string, Guid *string) error
	UnsetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*int32, error)
	UnsetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*int32, error)
	UntagAll(AuthenticationToken *string, Guid *string) error
	UpdateLinkedNotebook(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*int32, error)
	UpdateNote(AuthenticationToken *string, Note *edamtypes.Note) (*edamtypes.Note, error)
	UpdateNotebook(AuthenticationToken *string, Notebook *edamtypes.Notebook) (*int32, error)
	UpdateResource(AuthenticationToken *string, Resource *edamtypes.Resource) (*int32, error)
	UpdateSearch(AuthenticationToken *string, Search *edamtypes.SavedSearch) (*int32, error)
	UpdateSharedNotebook(AuthenticationToken *string, SharedNotebook *edamtypes.SharedNotebook) (*int32, error)
	UpdateTag(AuthenticationToken *string, Tag *edamtypes.Tag) (*int32, error)
}

type NoteStoreServer struct {
	Implementation NoteStore
}

func (s *NoteStoreServer) AuthenticateToSharedNote(req *NoteStoreAuthenticateToSharedNoteRequest, res *NoteStoreAuthenticateToSharedNoteResponse) error {
	val, err := s.Implementation.AuthenticateToSharedNote(req.Guid, req.NoteKey, req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) AuthenticateToSharedNotebook(req *NoteStoreAuthenticateToSharedNotebookRequest, res *NoteStoreAuthenticateToSharedNotebookResponse) error {
	val, err := s.Implementation.AuthenticateToSharedNotebook(req.ShareKey, req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CopyNote(req *NoteStoreCopyNoteRequest, res *NoteStoreCopyNoteResponse) error {
	val, err := s.Implementation.CopyNote(req.AuthenticationToken, req.NoteGuid, req.ToNotebookGuid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateLinkedNotebook(req *NoteStoreCreateLinkedNotebookRequest, res *NoteStoreCreateLinkedNotebookResponse) error {
	val, err := s.Implementation.CreateLinkedNotebook(req.AuthenticationToken, req.LinkedNotebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateNote(req *NoteStoreCreateNoteRequest, res *NoteStoreCreateNoteResponse) error {
	val, err := s.Implementation.CreateNote(req.AuthenticationToken, req.Note)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateNotebook(req *NoteStoreCreateNotebookRequest, res *NoteStoreCreateNotebookResponse) error {
	val, err := s.Implementation.CreateNotebook(req.AuthenticationToken, req.Notebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateSearch(req *NoteStoreCreateSearchRequest, res *NoteStoreCreateSearchResponse) error {
	val, err := s.Implementation.CreateSearch(req.AuthenticationToken, req.Search)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateSharedNotebook(req *NoteStoreCreateSharedNotebookRequest, res *NoteStoreCreateSharedNotebookResponse) error {
	val, err := s.Implementation.CreateSharedNotebook(req.AuthenticationToken, req.SharedNotebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) CreateTag(req *NoteStoreCreateTagRequest, res *NoteStoreCreateTagResponse) error {
	val, err := s.Implementation.CreateTag(req.AuthenticationToken, req.Tag)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) DeleteNote(req *NoteStoreDeleteNoteRequest, res *NoteStoreDeleteNoteResponse) error {
	val, err := s.Implementation.DeleteNote(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) EmailNote(req *NoteStoreEmailNoteRequest, res *NoteStoreEmailNoteResponse) error {
	err := s.Implementation.EmailNote(req.AuthenticationToken, req.Parameters)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	return err
}

func (s *NoteStoreServer) ExpungeInactiveNotes(req *NoteStoreExpungeInactiveNotesRequest, res *NoteStoreExpungeInactiveNotesResponse) error {
	val, err := s.Implementation.ExpungeInactiveNotes(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeLinkedNotebook(req *NoteStoreExpungeLinkedNotebookRequest, res *NoteStoreExpungeLinkedNotebookResponse) error {
	val, err := s.Implementation.ExpungeLinkedNotebook(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeNote(req *NoteStoreExpungeNoteRequest, res *NoteStoreExpungeNoteResponse) error {
	val, err := s.Implementation.ExpungeNote(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeNotebook(req *NoteStoreExpungeNotebookRequest, res *NoteStoreExpungeNotebookResponse) error {
	val, err := s.Implementation.ExpungeNotebook(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeNotes(req *NoteStoreExpungeNotesRequest, res *NoteStoreExpungeNotesResponse) error {
	val, err := s.Implementation.ExpungeNotes(req.AuthenticationToken, req.NoteGuids)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeSearch(req *NoteStoreExpungeSearchRequest, res *NoteStoreExpungeSearchResponse) error {
	val, err := s.Implementation.ExpungeSearch(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeSharedNotebooks(req *NoteStoreExpungeSharedNotebooksRequest, res *NoteStoreExpungeSharedNotebooksResponse) error {
	val, err := s.Implementation.ExpungeSharedNotebooks(req.AuthenticationToken, req.SharedNotebookIds)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ExpungeTag(req *NoteStoreExpungeTagRequest, res *NoteStoreExpungeTagResponse) error {
	val, err := s.Implementation.ExpungeTag(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) FindNoteCounts(req *NoteStoreFindNoteCountsRequest, res *NoteStoreFindNoteCountsResponse) error {
	val, err := s.Implementation.FindNoteCounts(req.AuthenticationToken, req.Filter, req.WithTrash)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) FindNoteOffset(req *NoteStoreFindNoteOffsetRequest, res *NoteStoreFindNoteOffsetResponse) error {
	val, err := s.Implementation.FindNoteOffset(req.AuthenticationToken, req.Filter, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) FindNotes(req *NoteStoreFindNotesRequest, res *NoteStoreFindNotesResponse) error {
	val, err := s.Implementation.FindNotes(req.AuthenticationToken, req.Filter, req.Offset, req.MaxNotes)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) FindNotesMetadata(req *NoteStoreFindNotesMetadataRequest, res *NoteStoreFindNotesMetadataResponse) error {
	val, err := s.Implementation.FindNotesMetadata(req.AuthenticationToken, req.Filter, req.Offset, req.MaxNotes, req.ResultSpec)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) FindRelated(req *NoteStoreFindRelatedRequest, res *NoteStoreFindRelatedResponse) error {
	val, err := s.Implementation.FindRelated(req.AuthenticationToken, req.Query, req.ResultSpec)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetDefaultNotebook(req *NoteStoreGetDefaultNotebookRequest, res *NoteStoreGetDefaultNotebookResponse) error {
	val, err := s.Implementation.GetDefaultNotebook(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetFilteredSyncChunk(req *NoteStoreGetFilteredSyncChunkRequest, res *NoteStoreGetFilteredSyncChunkResponse) error {
	val, err := s.Implementation.GetFilteredSyncChunk(req.AuthenticationToken, req.AfterUSN, req.MaxEntries, req.Filter)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetLinkedNotebookSyncChunk(req *NoteStoreGetLinkedNotebookSyncChunkRequest, res *NoteStoreGetLinkedNotebookSyncChunkResponse) error {
	val, err := s.Implementation.GetLinkedNotebookSyncChunk(req.AuthenticationToken, req.LinkedNotebook, req.AfterUSN, req.MaxEntries, req.FullSyncOnly)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetLinkedNotebookSyncState(req *NoteStoreGetLinkedNotebookSyncStateRequest, res *NoteStoreGetLinkedNotebookSyncStateResponse) error {
	val, err := s.Implementation.GetLinkedNotebookSyncState(req.AuthenticationToken, req.LinkedNotebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNote(req *NoteStoreGetNoteRequest, res *NoteStoreGetNoteResponse) error {
	val, err := s.Implementation.GetNote(req.AuthenticationToken, req.Guid, req.WithContent, req.WithResourcesData, req.WithResourcesRecognition, req.WithResourcesAlternateData)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteApplicationData(req *NoteStoreGetNoteApplicationDataRequest, res *NoteStoreGetNoteApplicationDataResponse) error {
	val, err := s.Implementation.GetNoteApplicationData(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteApplicationDataEntry(req *NoteStoreGetNoteApplicationDataEntryRequest, res *NoteStoreGetNoteApplicationDataEntryResponse) error {
	val, err := s.Implementation.GetNoteApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteContent(req *NoteStoreGetNoteContentRequest, res *NoteStoreGetNoteContentResponse) error {
	val, err := s.Implementation.GetNoteContent(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteSearchText(req *NoteStoreGetNoteSearchTextRequest, res *NoteStoreGetNoteSearchTextResponse) error {
	val, err := s.Implementation.GetNoteSearchText(req.AuthenticationToken, req.Guid, req.NoteOnly, req.TokenizeForIndexing)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteTagNames(req *NoteStoreGetNoteTagNamesRequest, res *NoteStoreGetNoteTagNamesResponse) error {
	val, err := s.Implementation.GetNoteTagNames(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNoteVersion(req *NoteStoreGetNoteVersionRequest, res *NoteStoreGetNoteVersionResponse) error {
	val, err := s.Implementation.GetNoteVersion(req.AuthenticationToken, req.NoteGuid, req.UpdateSequenceNum, req.WithResourcesData, req.WithResourcesRecognition, req.WithResourcesAlternateData)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetNotebook(req *NoteStoreGetNotebookRequest, res *NoteStoreGetNotebookResponse) error {
	val, err := s.Implementation.GetNotebook(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetPublicNotebook(req *NoteStoreGetPublicNotebookRequest, res *NoteStoreGetPublicNotebookResponse) error {
	val, err := s.Implementation.GetPublicNotebook(req.UserId, req.PublicUri)
	switch e := err.(type) {
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResource(req *NoteStoreGetResourceRequest, res *NoteStoreGetResourceResponse) error {
	val, err := s.Implementation.GetResource(req.AuthenticationToken, req.Guid, req.WithData, req.WithRecognition, req.WithAttributes, req.WithAlternateData)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceAlternateData(req *NoteStoreGetResourceAlternateDataRequest, res *NoteStoreGetResourceAlternateDataResponse) error {
	val, err := s.Implementation.GetResourceAlternateData(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceApplicationData(req *NoteStoreGetResourceApplicationDataRequest, res *NoteStoreGetResourceApplicationDataResponse) error {
	val, err := s.Implementation.GetResourceApplicationData(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceApplicationDataEntry(req *NoteStoreGetResourceApplicationDataEntryRequest, res *NoteStoreGetResourceApplicationDataEntryResponse) error {
	val, err := s.Implementation.GetResourceApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceAttributes(req *NoteStoreGetResourceAttributesRequest, res *NoteStoreGetResourceAttributesResponse) error {
	val, err := s.Implementation.GetResourceAttributes(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceByHash(req *NoteStoreGetResourceByHashRequest, res *NoteStoreGetResourceByHashResponse) error {
	val, err := s.Implementation.GetResourceByHash(req.AuthenticationToken, req.NoteGuid, req.ContentHash, req.WithData, req.WithRecognition, req.WithAlternateData)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceData(req *NoteStoreGetResourceDataRequest, res *NoteStoreGetResourceDataResponse) error {
	val, err := s.Implementation.GetResourceData(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceRecognition(req *NoteStoreGetResourceRecognitionRequest, res *NoteStoreGetResourceRecognitionResponse) error {
	val, err := s.Implementation.GetResourceRecognition(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetResourceSearchText(req *NoteStoreGetResourceSearchTextRequest, res *NoteStoreGetResourceSearchTextResponse) error {
	val, err := s.Implementation.GetResourceSearchText(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetSearch(req *NoteStoreGetSearchRequest, res *NoteStoreGetSearchResponse) error {
	val, err := s.Implementation.GetSearch(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetSharedNotebookByAuth(req *NoteStoreGetSharedNotebookByAuthRequest, res *NoteStoreGetSharedNotebookByAuthResponse) error {
	val, err := s.Implementation.GetSharedNotebookByAuth(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetSyncChunk(req *NoteStoreGetSyncChunkRequest, res *NoteStoreGetSyncChunkResponse) error {
	val, err := s.Implementation.GetSyncChunk(req.AuthenticationToken, req.AfterUSN, req.MaxEntries, req.FullSyncOnly)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetSyncState(req *NoteStoreGetSyncStateRequest, res *NoteStoreGetSyncStateResponse) error {
	val, err := s.Implementation.GetSyncState(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetSyncStateWithMetrics(req *NoteStoreGetSyncStateWithMetricsRequest, res *NoteStoreGetSyncStateWithMetricsResponse) error {
	val, err := s.Implementation.GetSyncStateWithMetrics(req.AuthenticationToken, req.ClientMetrics)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) GetTag(req *NoteStoreGetTagRequest, res *NoteStoreGetTagResponse) error {
	val, err := s.Implementation.GetTag(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListLinkedNotebooks(req *NoteStoreListLinkedNotebooksRequest, res *NoteStoreListLinkedNotebooksResponse) error {
	val, err := s.Implementation.ListLinkedNotebooks(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListNoteVersions(req *NoteStoreListNoteVersionsRequest, res *NoteStoreListNoteVersionsResponse) error {
	val, err := s.Implementation.ListNoteVersions(req.AuthenticationToken, req.NoteGuid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListNotebooks(req *NoteStoreListNotebooksRequest, res *NoteStoreListNotebooksResponse) error {
	val, err := s.Implementation.ListNotebooks(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListSearches(req *NoteStoreListSearchesRequest, res *NoteStoreListSearchesResponse) error {
	val, err := s.Implementation.ListSearches(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListSharedNotebooks(req *NoteStoreListSharedNotebooksRequest, res *NoteStoreListSharedNotebooksResponse) error {
	val, err := s.Implementation.ListSharedNotebooks(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListTags(req *NoteStoreListTagsRequest, res *NoteStoreListTagsResponse) error {
	val, err := s.Implementation.ListTags(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ListTagsByNotebook(req *NoteStoreListTagsByNotebookRequest, res *NoteStoreListTagsByNotebookResponse) error {
	val, err := s.Implementation.ListTagsByNotebook(req.AuthenticationToken, req.NotebookGuid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) SendMessageToSharedNotebookMembers(req *NoteStoreSendMessageToSharedNotebookMembersRequest, res *NoteStoreSendMessageToSharedNotebookMembersResponse) error {
	val, err := s.Implementation.SendMessageToSharedNotebookMembers(req.AuthenticationToken, req.NotebookGuid, req.MessageText, req.Recipients)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) SetNoteApplicationDataEntry(req *NoteStoreSetNoteApplicationDataEntryRequest, res *NoteStoreSetNoteApplicationDataEntryResponse) error {
	val, err := s.Implementation.SetNoteApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key, req.Value)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) SetResourceApplicationDataEntry(req *NoteStoreSetResourceApplicationDataEntryRequest, res *NoteStoreSetResourceApplicationDataEntryResponse) error {
	val, err := s.Implementation.SetResourceApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key, req.Value)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) SetSharedNotebookRecipientSettings(req *NoteStoreSetSharedNotebookRecipientSettingsRequest, res *NoteStoreSetSharedNotebookRecipientSettingsResponse) error {
	val, err := s.Implementation.SetSharedNotebookRecipientSettings(req.AuthenticationToken, req.SharedNotebookId, req.RecipientSettings)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) ShareNote(req *NoteStoreShareNoteRequest, res *NoteStoreShareNoteResponse) error {
	val, err := s.Implementation.ShareNote(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) StopSharingNote(req *NoteStoreStopSharingNoteRequest, res *NoteStoreStopSharingNoteResponse) error {
	err := s.Implementation.StopSharingNote(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	return err
}

func (s *NoteStoreServer) UnsetNoteApplicationDataEntry(req *NoteStoreUnsetNoteApplicationDataEntryRequest, res *NoteStoreUnsetNoteApplicationDataEntryResponse) error {
	val, err := s.Implementation.UnsetNoteApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UnsetResourceApplicationDataEntry(req *NoteStoreUnsetResourceApplicationDataEntryRequest, res *NoteStoreUnsetResourceApplicationDataEntryResponse) error {
	val, err := s.Implementation.UnsetResourceApplicationDataEntry(req.AuthenticationToken, req.Guid, req.Key)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UntagAll(req *NoteStoreUntagAllRequest, res *NoteStoreUntagAllResponse) error {
	err := s.Implementation.UntagAll(req.AuthenticationToken, req.Guid)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	return err
}

func (s *NoteStoreServer) UpdateLinkedNotebook(req *NoteStoreUpdateLinkedNotebookRequest, res *NoteStoreUpdateLinkedNotebookResponse) error {
	val, err := s.Implementation.UpdateLinkedNotebook(req.AuthenticationToken, req.LinkedNotebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateNote(req *NoteStoreUpdateNoteRequest, res *NoteStoreUpdateNoteResponse) error {
	val, err := s.Implementation.UpdateNote(req.AuthenticationToken, req.Note)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateNotebook(req *NoteStoreUpdateNotebookRequest, res *NoteStoreUpdateNotebookResponse) error {
	val, err := s.Implementation.UpdateNotebook(req.AuthenticationToken, req.Notebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateResource(req *NoteStoreUpdateResourceRequest, res *NoteStoreUpdateResourceResponse) error {
	val, err := s.Implementation.UpdateResource(req.AuthenticationToken, req.Resource)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateSearch(req *NoteStoreUpdateSearchRequest, res *NoteStoreUpdateSearchResponse) error {
	val, err := s.Implementation.UpdateSearch(req.AuthenticationToken, req.Search)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateSharedNotebook(req *NoteStoreUpdateSharedNotebookRequest, res *NoteStoreUpdateSharedNotebookResponse) error {
	val, err := s.Implementation.UpdateSharedNotebook(req.AuthenticationToken, req.SharedNotebook)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *NoteStoreServer) UpdateTag(req *NoteStoreUpdateTagRequest, res *NoteStoreUpdateTagResponse) error {
	val, err := s.Implementation.UpdateTag(req.AuthenticationToken, req.Tag)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	}
	res.Value = val
	return err
}

type NoteStoreAuthenticateToSharedNoteRequest struct {
	Guid                *string `thrift:"1,required" json:"guid"`
	NoteKey             *string `thrift:"2,required" json:"noteKey"`
	AuthenticationToken *string `thrift:"3,required" json:"authenticationToken"`
}

type NoteStoreAuthenticateToSharedNoteResponse struct {
	Value             *edamuserstore.AuthenticationResult `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException       `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException   `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException     `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreAuthenticateToSharedNotebookRequest struct {
	ShareKey            *string `thrift:"1,required" json:"shareKey"`
	AuthenticationToken *string `thrift:"2,required" json:"authenticationToken"`
}

type NoteStoreAuthenticateToSharedNotebookResponse struct {
	Value             *edamuserstore.AuthenticationResult `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException       `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException   `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException     `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreCopyNoteRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	NoteGuid            *string `thrift:"2,required" json:"noteGuid"`
	ToNotebookGuid      *string `thrift:"3,required" json:"toNotebookGuid"`
}

type NoteStoreCopyNoteResponse struct {
	Value             *edamtypes.Note                   `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreCreateLinkedNotebookRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	LinkedNotebook      *edamtypes.LinkedNotebook `thrift:"2,required" json:"linkedNotebook"`
}

type NoteStoreCreateLinkedNotebookResponse struct {
	Value             *edamtypes.LinkedNotebook         `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreCreateNoteRequest struct {
	AuthenticationToken *string         `thrift:"1,required" json:"authenticationToken"`
	Note                *edamtypes.Note `thrift:"2,required" json:"note"`
}

type NoteStoreCreateNoteResponse struct {
	Value             *edamtypes.Note                   `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreCreateNotebookRequest struct {
	AuthenticationToken *string             `thrift:"1,required" json:"authenticationToken"`
	Notebook            *edamtypes.Notebook `thrift:"2,required" json:"notebook"`
}

type NoteStoreCreateNotebookResponse struct {
	Value           *edamtypes.Notebook             `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreCreateSearchRequest struct {
	AuthenticationToken *string                `thrift:"1,required" json:"authenticationToken"`
	Search              *edamtypes.SavedSearch `thrift:"2,required" json:"search"`
}

type NoteStoreCreateSearchResponse struct {
	Value           *edamtypes.SavedSearch          `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreCreateSharedNotebookRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	SharedNotebook      *edamtypes.SharedNotebook `thrift:"2,required" json:"sharedNotebook"`
}

type NoteStoreCreateSharedNotebookResponse struct {
	Value             *edamtypes.SharedNotebook         `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreCreateTagRequest struct {
	AuthenticationToken *string        `thrift:"1,required" json:"authenticationToken"`
	Tag                 *edamtypes.Tag `thrift:"2,required" json:"tag"`
}

type NoteStoreCreateTagResponse struct {
	Value             *edamtypes.Tag                    `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreDeleteNoteRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreDeleteNoteResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreEmailNoteRequest struct {
	AuthenticationToken *string              `thrift:"1,required" json:"authenticationToken"`
	Parameters          *NoteEmailParameters `thrift:"2,required" json:"parameters"`
}

type NoteStoreEmailNoteResponse struct {
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreExpungeInactiveNotesRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreExpungeInactiveNotesResponse struct {
	Value           *int32                          `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreExpungeLinkedNotebookRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreExpungeLinkedNotebookResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreExpungeNoteRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreExpungeNoteResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreExpungeNotebookRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreExpungeNotebookResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreExpungeNotesRequest struct {
	AuthenticationToken *string   `thrift:"1,required" json:"authenticationToken"`
	NoteGuids           []*string `thrift:"2,required" json:"noteGuids"`
}

type NoteStoreExpungeNotesResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreExpungeSearchRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreExpungeSearchResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreExpungeSharedNotebooksRequest struct {
	AuthenticationToken *string  `thrift:"1,required" json:"authenticationToken"`
	SharedNotebookIds   []*int64 `thrift:"2,required" json:"sharedNotebookIds"`
}

type NoteStoreExpungeSharedNotebooksResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreExpungeTagRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreExpungeTagResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreFindNoteCountsRequest struct {
	AuthenticationToken *string     `thrift:"1,required" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"2,required" json:"filter"`
	WithTrash           *bool       `thrift:"3,required" json:"withTrash"`
}

type NoteStoreFindNoteCountsResponse struct {
	Value             *NoteCollectionCounts             `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreFindNoteOffsetRequest struct {
	AuthenticationToken *string     `thrift:"1,required" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"2,required" json:"filter"`
	Guid                *string     `thrift:"3,required" json:"guid"`
}

type NoteStoreFindNoteOffsetResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreFindNotesRequest struct {
	AuthenticationToken *string     `thrift:"1,required" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"2,required" json:"filter"`
	Offset              *int32      `thrift:"3,required" json:"offset"`
	MaxNotes            *int32      `thrift:"4,required" json:"maxNotes"`
}

type NoteStoreFindNotesResponse struct {
	Value             *NoteList                         `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreFindNotesMetadataRequest struct {
	AuthenticationToken *string                  `thrift:"1,required" json:"authenticationToken"`
	Filter              *NoteFilter              `thrift:"2,required" json:"filter"`
	Offset              *int32                   `thrift:"3,required" json:"offset"`
	MaxNotes            *int32                   `thrift:"4,required" json:"maxNotes"`
	ResultSpec          *NotesMetadataResultSpec `thrift:"5,required" json:"resultSpec"`
}

type NoteStoreFindNotesMetadataResponse struct {
	Value             *NotesMetadataList                `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreFindRelatedRequest struct {
	AuthenticationToken *string            `thrift:"1,required" json:"authenticationToken"`
	Query               *RelatedQuery      `thrift:"2,required" json:"query"`
	ResultSpec          *RelatedResultSpec `thrift:"3,required" json:"resultSpec"`
}

type NoteStoreFindRelatedResponse struct {
	Value             *RelatedResult                    `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetDefaultNotebookRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreGetDefaultNotebookResponse struct {
	Value           *edamtypes.Notebook             `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreGetFilteredSyncChunkRequest struct {
	AuthenticationToken *string          `thrift:"1,required" json:"authenticationToken"`
	AfterUSN            *int32           `thrift:"2,required" json:"afterUSN"`
	MaxEntries          *int32           `thrift:"3,required" json:"maxEntries"`
	Filter              *SyncChunkFilter `thrift:"4,required" json:"filter"`
}

type NoteStoreGetFilteredSyncChunkResponse struct {
	Value           *SyncChunk                      `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreGetLinkedNotebookSyncChunkRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	LinkedNotebook      *edamtypes.LinkedNotebook `thrift:"2,required" json:"linkedNotebook"`
	AfterUSN            *int32                    `thrift:"3,required" json:"afterUSN"`
	MaxEntries          *int32                    `thrift:"4,required" json:"maxEntries"`
	FullSyncOnly        *bool                     `thrift:"5,required" json:"fullSyncOnly"`
}

type NoteStoreGetLinkedNotebookSyncChunkResponse struct {
	Value             *SyncChunk                        `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetLinkedNotebookSyncStateRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	LinkedNotebook      *edamtypes.LinkedNotebook `thrift:"2,required" json:"linkedNotebook"`
}

type NoteStoreGetLinkedNotebookSyncStateResponse struct {
	Value             *SyncState                        `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteRequest struct {
	AuthenticationToken        *string `thrift:"1,required" json:"authenticationToken"`
	Guid                       *string `thrift:"2,required" json:"guid"`
	WithContent                *bool   `thrift:"3,required" json:"withContent"`
	WithResourcesData          *bool   `thrift:"4,required" json:"withResourcesData"`
	WithResourcesRecognition   *bool   `thrift:"5,required" json:"withResourcesRecognition"`
	WithResourcesAlternateData *bool   `thrift:"6,required" json:"withResourcesAlternateData"`
}

type NoteStoreGetNoteResponse struct {
	Value             *edamtypes.Note                   `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteApplicationDataRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetNoteApplicationDataResponse struct {
	Value             *edamtypes.LazyMap                `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
}

type NoteStoreGetNoteApplicationDataEntryResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteContentRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetNoteContentResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteSearchTextRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	NoteOnly            *bool   `thrift:"3,required" json:"noteOnly"`
	TokenizeForIndexing *bool   `thrift:"4,required" json:"tokenizeForIndexing"`
}

type NoteStoreGetNoteSearchTextResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteTagNamesRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetNoteTagNamesResponse struct {
	Value             []*string                         `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNoteVersionRequest struct {
	AuthenticationToken        *string `thrift:"1,required" json:"authenticationToken"`
	NoteGuid                   *string `thrift:"2,required" json:"noteGuid"`
	UpdateSequenceNum          *int32  `thrift:"3,required" json:"updateSequenceNum"`
	WithResourcesData          *bool   `thrift:"4,required" json:"withResourcesData"`
	WithResourcesRecognition   *bool   `thrift:"5,required" json:"withResourcesRecognition"`
	WithResourcesAlternateData *bool   `thrift:"6,required" json:"withResourcesAlternateData"`
}

type NoteStoreGetNoteVersionResponse struct {
	Value             *edamtypes.Note                   `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetNotebookRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetNotebookResponse struct {
	Value             *edamtypes.Notebook               `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetPublicNotebookRequest struct {
	UserId    *int32  `thrift:"1,required" json:"userId"`
	PublicUri *string `thrift:"2,required" json:"publicUri"`
}

type NoteStoreGetPublicNotebookResponse struct {
	Value             *edamtypes.Notebook               `thrift:"0" json:"value,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"1" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	WithData            *bool   `thrift:"3,required" json:"withData"`
	WithRecognition     *bool   `thrift:"4,required" json:"withRecognition"`
	WithAttributes      *bool   `thrift:"5,required" json:"withAttributes"`
	WithAlternateData   *bool   `thrift:"6,required" json:"withAlternateData"`
}

type NoteStoreGetResourceResponse struct {
	Value             *edamtypes.Resource               `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceAlternateDataRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceAlternateDataResponse struct {
	Value             []byte                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceApplicationDataRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceApplicationDataResponse struct {
	Value             *edamtypes.LazyMap                `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
}

type NoteStoreGetResourceApplicationDataEntryResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceAttributesRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceAttributesResponse struct {
	Value             *edamtypes.ResourceAttributes     `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceByHashRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	NoteGuid            *string `thrift:"2,required" json:"noteGuid"`
	ContentHash         []byte  `thrift:"3,required" json:"contentHash"`
	WithData            *bool   `thrift:"4,required" json:"withData"`
	WithRecognition     *bool   `thrift:"5,required" json:"withRecognition"`
	WithAlternateData   *bool   `thrift:"6,required" json:"withAlternateData"`
}

type NoteStoreGetResourceByHashResponse struct {
	Value             *edamtypes.Resource               `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceDataRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceDataResponse struct {
	Value             []byte                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceRecognitionRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceRecognitionResponse struct {
	Value             []byte                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetResourceSearchTextRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetResourceSearchTextResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetSearchRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetSearchResponse struct {
	Value             *edamtypes.SavedSearch            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreGetSharedNotebookByAuthRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreGetSharedNotebookByAuthResponse struct {
	Value             *edamtypes.SharedNotebook         `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreGetSyncChunkRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	AfterUSN            *int32  `thrift:"2,required" json:"afterUSN"`
	MaxEntries          *int32  `thrift:"3,required" json:"maxEntries"`
	FullSyncOnly        *bool   `thrift:"4,required" json:"fullSyncOnly"`
}

type NoteStoreGetSyncChunkResponse struct {
	Value           *SyncChunk                      `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreGetSyncStateRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreGetSyncStateResponse struct {
	Value           *SyncState                      `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreGetSyncStateWithMetricsRequest struct {
	AuthenticationToken *string             `thrift:"1,required" json:"authenticationToken"`
	ClientMetrics       *ClientUsageMetrics `thrift:"2,required" json:"clientMetrics"`
}

type NoteStoreGetSyncStateWithMetricsResponse struct {
	Value           *SyncState                      `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreGetTagRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreGetTagResponse struct {
	Value             *edamtypes.Tag                    `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreListLinkedNotebooksRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreListLinkedNotebooksResponse struct {
	Value             []*edamtypes.LinkedNotebook       `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreListNoteVersionsRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	NoteGuid            *string `thrift:"2,required" json:"noteGuid"`
}

type NoteStoreListNoteVersionsResponse struct {
	Value             []*NoteVersionId                  `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreListNotebooksRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreListNotebooksResponse struct {
	Value           []*edamtypes.Notebook           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreListSearchesRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreListSearchesResponse struct {
	Value           []*edamtypes.SavedSearch        `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreListSharedNotebooksRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreListSharedNotebooksResponse struct {
	Value             []*edamtypes.SharedNotebook       `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreListTagsRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type NoteStoreListTagsResponse struct {
	Value           []*edamtypes.Tag                `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type NoteStoreListTagsByNotebookRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	NotebookGuid        *string `thrift:"2,required" json:"notebookGuid"`
}

type NoteStoreListTagsByNotebookResponse struct {
	Value             []*edamtypes.Tag                  `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreSendMessageToSharedNotebookMembersRequest struct {
	AuthenticationToken *string   `thrift:"1,required" json:"authenticationToken"`
	NotebookGuid        *string   `thrift:"2,required" json:"notebookGuid"`
	MessageText         *string   `thrift:"3,required" json:"messageText"`
	Recipients          []*string `thrift:"4,required" json:"recipients"`
}

type NoteStoreSendMessageToSharedNotebookMembersResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreSetNoteApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
	Value               *string `thrift:"4,required" json:"value"`
}

type NoteStoreSetNoteApplicationDataEntryResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreSetResourceApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
	Value               *string `thrift:"4,required" json:"value"`
}

type NoteStoreSetResourceApplicationDataEntryResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreSetSharedNotebookRecipientSettingsRequest struct {
	AuthenticationToken *string                                    `thrift:"1,required" json:"authenticationToken"`
	SharedNotebookId    *int64                                     `thrift:"2,required" json:"sharedNotebookId"`
	RecipientSettings   *edamtypes.SharedNotebookRecipientSettings `thrift:"3,required" json:"recipientSettings"`
}

type NoteStoreSetSharedNotebookRecipientSettingsResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreShareNoteRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreShareNoteResponse struct {
	Value             *string                           `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreStopSharingNoteRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreStopSharingNoteResponse struct {
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreUnsetNoteApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
}

type NoteStoreUnsetNoteApplicationDataEntryResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUnsetResourceApplicationDataEntryRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
	Key                 *string `thrift:"3,required" json:"key"`
}

type NoteStoreUnsetResourceApplicationDataEntryResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUntagAllRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	Guid                *string `thrift:"2,required" json:"guid"`
}

type NoteStoreUntagAllResponse struct {
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUpdateLinkedNotebookRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	LinkedNotebook      *edamtypes.LinkedNotebook `thrift:"2,required" json:"linkedNotebook"`
}

type NoteStoreUpdateLinkedNotebookResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreUpdateNoteRequest struct {
	AuthenticationToken *string         `thrift:"1,required" json:"authenticationToken"`
	Note                *edamtypes.Note `thrift:"2,required" json:"note"`
}

type NoteStoreUpdateNoteResponse struct {
	Value             *edamtypes.Note                   `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUpdateNotebookRequest struct {
	AuthenticationToken *string             `thrift:"1,required" json:"authenticationToken"`
	Notebook            *edamtypes.Notebook `thrift:"2,required" json:"notebook"`
}

type NoteStoreUpdateNotebookResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUpdateResourceRequest struct {
	AuthenticationToken *string             `thrift:"1,required" json:"authenticationToken"`
	Resource            *edamtypes.Resource `thrift:"2,required" json:"resource"`
}

type NoteStoreUpdateResourceResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUpdateSearchRequest struct {
	AuthenticationToken *string                `thrift:"1,required" json:"authenticationToken"`
	Search              *edamtypes.SavedSearch `thrift:"2,required" json:"search"`
}

type NoteStoreUpdateSearchResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreUpdateSharedNotebookRequest struct {
	AuthenticationToken *string                   `thrift:"1,required" json:"authenticationToken"`
	SharedNotebook      *edamtypes.SharedNotebook `thrift:"2,required" json:"sharedNotebook"`
}

type NoteStoreUpdateSharedNotebookResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"2" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"3" json:"systemException,omitempty"`
}

type NoteStoreUpdateTagRequest struct {
	AuthenticationToken *string        `thrift:"1,required" json:"authenticationToken"`
	Tag                 *edamtypes.Tag `thrift:"2,required" json:"tag"`
}

type NoteStoreUpdateTagResponse struct {
	Value             *int32                            `thrift:"0" json:"value,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"1" json:"userException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"3" json:"notFoundException,omitempty"`
}

type NoteStoreClient struct {
	Client RPCClient
}

func (s *NoteStoreClient) AuthenticateToSharedNote(Guid *string, NoteKey *string, AuthenticationToken *string) (*edamuserstore.AuthenticationResult, error) {
	req := &NoteStoreAuthenticateToSharedNoteRequest{
		Guid:                Guid,
		NoteKey:             NoteKey,
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreAuthenticateToSharedNoteResponse{}
	err := s.Client.Call("authenticateToSharedNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) AuthenticateToSharedNotebook(ShareKey *string, AuthenticationToken *string) (*edamuserstore.AuthenticationResult, error) {
	req := &NoteStoreAuthenticateToSharedNotebookRequest{
		ShareKey:            ShareKey,
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreAuthenticateToSharedNotebookResponse{}
	err := s.Client.Call("authenticateToSharedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CopyNote(AuthenticationToken *string, NoteGuid *string, ToNotebookGuid *string) (*edamtypes.Note, error) {
	req := &NoteStoreCopyNoteRequest{
		AuthenticationToken: AuthenticationToken,
		NoteGuid:            NoteGuid,
		ToNotebookGuid:      ToNotebookGuid,
	}
	res := &NoteStoreCopyNoteResponse{}
	err := s.Client.Call("copyNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateLinkedNotebook(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*edamtypes.LinkedNotebook, error) {
	req := &NoteStoreCreateLinkedNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		LinkedNotebook:      LinkedNotebook,
	}
	res := &NoteStoreCreateLinkedNotebookResponse{}
	err := s.Client.Call("createLinkedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateNote(AuthenticationToken *string, Note *edamtypes.Note) (*edamtypes.Note, error) {
	req := &NoteStoreCreateNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Note:                Note,
	}
	res := &NoteStoreCreateNoteResponse{}
	err := s.Client.Call("createNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateNotebook(AuthenticationToken *string, Notebook *edamtypes.Notebook) (*edamtypes.Notebook, error) {
	req := &NoteStoreCreateNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		Notebook:            Notebook,
	}
	res := &NoteStoreCreateNotebookResponse{}
	err := s.Client.Call("createNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateSearch(AuthenticationToken *string, Search *edamtypes.SavedSearch) (*edamtypes.SavedSearch, error) {
	req := &NoteStoreCreateSearchRequest{
		AuthenticationToken: AuthenticationToken,
		Search:              Search,
	}
	res := &NoteStoreCreateSearchResponse{}
	err := s.Client.Call("createSearch", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateSharedNotebook(AuthenticationToken *string, SharedNotebook *edamtypes.SharedNotebook) (*edamtypes.SharedNotebook, error) {
	req := &NoteStoreCreateSharedNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		SharedNotebook:      SharedNotebook,
	}
	res := &NoteStoreCreateSharedNotebookResponse{}
	err := s.Client.Call("createSharedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) CreateTag(AuthenticationToken *string, Tag *edamtypes.Tag) (*edamtypes.Tag, error) {
	req := &NoteStoreCreateTagRequest{
		AuthenticationToken: AuthenticationToken,
		Tag:                 Tag,
	}
	res := &NoteStoreCreateTagResponse{}
	err := s.Client.Call("createTag", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) DeleteNote(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreDeleteNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreDeleteNoteResponse{}
	err := s.Client.Call("deleteNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) EmailNote(AuthenticationToken *string, Parameters *NoteEmailParameters) error {
	req := &NoteStoreEmailNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Parameters:          Parameters,
	}
	res := &NoteStoreEmailNoteResponse{}
	err := s.Client.Call("emailNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return err
}

func (s *NoteStoreClient) ExpungeInactiveNotes(AuthenticationToken *string) (*int32, error) {
	req := &NoteStoreExpungeInactiveNotesRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreExpungeInactiveNotesResponse{}
	err := s.Client.Call("expungeInactiveNotes", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeLinkedNotebook(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreExpungeLinkedNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreExpungeLinkedNotebookResponse{}
	err := s.Client.Call("expungeLinkedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeNote(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreExpungeNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreExpungeNoteResponse{}
	err := s.Client.Call("expungeNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeNotebook(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreExpungeNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreExpungeNotebookResponse{}
	err := s.Client.Call("expungeNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeNotes(AuthenticationToken *string, NoteGuids []*string) (*int32, error) {
	req := &NoteStoreExpungeNotesRequest{
		AuthenticationToken: AuthenticationToken,
		NoteGuids:           NoteGuids,
	}
	res := &NoteStoreExpungeNotesResponse{}
	err := s.Client.Call("expungeNotes", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeSearch(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreExpungeSearchRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreExpungeSearchResponse{}
	err := s.Client.Call("expungeSearch", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeSharedNotebooks(AuthenticationToken *string, SharedNotebookIds []*int64) (*int32, error) {
	req := &NoteStoreExpungeSharedNotebooksRequest{
		AuthenticationToken: AuthenticationToken,
		SharedNotebookIds:   SharedNotebookIds,
	}
	res := &NoteStoreExpungeSharedNotebooksResponse{}
	err := s.Client.Call("expungeSharedNotebooks", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ExpungeTag(AuthenticationToken *string, Guid *string) (*int32, error) {
	req := &NoteStoreExpungeTagRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreExpungeTagResponse{}
	err := s.Client.Call("expungeTag", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) FindNoteCounts(AuthenticationToken *string, Filter *NoteFilter, WithTrash *bool) (*NoteCollectionCounts, error) {
	req := &NoteStoreFindNoteCountsRequest{
		AuthenticationToken: AuthenticationToken,
		Filter:              Filter,
		WithTrash:           WithTrash,
	}
	res := &NoteStoreFindNoteCountsResponse{}
	err := s.Client.Call("findNoteCounts", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) FindNoteOffset(AuthenticationToken *string, Filter *NoteFilter, Guid *string) (*int32, error) {
	req := &NoteStoreFindNoteOffsetRequest{
		AuthenticationToken: AuthenticationToken,
		Filter:              Filter,
		Guid:                Guid,
	}
	res := &NoteStoreFindNoteOffsetResponse{}
	err := s.Client.Call("findNoteOffset", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) FindNotes(AuthenticationToken *string, Filter *NoteFilter, Offset *int32, MaxNotes *int32) (*NoteList, error) {
	req := &NoteStoreFindNotesRequest{
		AuthenticationToken: AuthenticationToken,
		Filter:              Filter,
		Offset:              Offset,
		MaxNotes:            MaxNotes,
	}
	res := &NoteStoreFindNotesResponse{}
	err := s.Client.Call("findNotes", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) FindNotesMetadata(AuthenticationToken *string, Filter *NoteFilter, Offset *int32, MaxNotes *int32, ResultSpec *NotesMetadataResultSpec) (*NotesMetadataList, error) {
	req := &NoteStoreFindNotesMetadataRequest{
		AuthenticationToken: AuthenticationToken,
		Filter:              Filter,
		Offset:              Offset,
		MaxNotes:            MaxNotes,
		ResultSpec:          ResultSpec,
	}
	res := &NoteStoreFindNotesMetadataResponse{}
	err := s.Client.Call("findNotesMetadata", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) FindRelated(AuthenticationToken *string, Query *RelatedQuery, ResultSpec *RelatedResultSpec) (*RelatedResult, error) {
	req := &NoteStoreFindRelatedRequest{
		AuthenticationToken: AuthenticationToken,
		Query:               Query,
		ResultSpec:          ResultSpec,
	}
	res := &NoteStoreFindRelatedResponse{}
	err := s.Client.Call("findRelated", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetDefaultNotebook(AuthenticationToken *string) (*edamtypes.Notebook, error) {
	req := &NoteStoreGetDefaultNotebookRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreGetDefaultNotebookResponse{}
	err := s.Client.Call("getDefaultNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetFilteredSyncChunk(AuthenticationToken *string, AfterUSN *int32, MaxEntries *int32, Filter *SyncChunkFilter) (*SyncChunk, error) {
	req := &NoteStoreGetFilteredSyncChunkRequest{
		AuthenticationToken: AuthenticationToken,
		AfterUSN:            AfterUSN,
		MaxEntries:          MaxEntries,
		Filter:              Filter,
	}
	res := &NoteStoreGetFilteredSyncChunkResponse{}
	err := s.Client.Call("getFilteredSyncChunk", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetLinkedNotebookSyncChunk(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook, AfterUSN *int32, MaxEntries *int32, FullSyncOnly *bool) (*SyncChunk, error) {
	req := &NoteStoreGetLinkedNotebookSyncChunkRequest{
		AuthenticationToken: AuthenticationToken,
		LinkedNotebook:      LinkedNotebook,
		AfterUSN:            AfterUSN,
		MaxEntries:          MaxEntries,
		FullSyncOnly:        FullSyncOnly,
	}
	res := &NoteStoreGetLinkedNotebookSyncChunkResponse{}
	err := s.Client.Call("getLinkedNotebookSyncChunk", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetLinkedNotebookSyncState(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*SyncState, error) {
	req := &NoteStoreGetLinkedNotebookSyncStateRequest{
		AuthenticationToken: AuthenticationToken,
		LinkedNotebook:      LinkedNotebook,
	}
	res := &NoteStoreGetLinkedNotebookSyncStateResponse{}
	err := s.Client.Call("getLinkedNotebookSyncState", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNote(AuthenticationToken *string, Guid *string, WithContent *bool, WithResourcesData *bool, WithResourcesRecognition *bool, WithResourcesAlternateData *bool) (*edamtypes.Note, error) {
	req := &NoteStoreGetNoteRequest{
		AuthenticationToken:        AuthenticationToken,
		Guid:                       Guid,
		WithContent:                WithContent,
		WithResourcesData:          WithResourcesData,
		WithResourcesRecognition:   WithResourcesRecognition,
		WithResourcesAlternateData: WithResourcesAlternateData,
	}
	res := &NoteStoreGetNoteResponse{}
	err := s.Client.Call("getNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteApplicationData(AuthenticationToken *string, Guid *string) (*edamtypes.LazyMap, error) {
	req := &NoteStoreGetNoteApplicationDataRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetNoteApplicationDataResponse{}
	err := s.Client.Call("getNoteApplicationData", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*string, error) {
	req := &NoteStoreGetNoteApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
	}
	res := &NoteStoreGetNoteApplicationDataEntryResponse{}
	err := s.Client.Call("getNoteApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteContent(AuthenticationToken *string, Guid *string) (*string, error) {
	req := &NoteStoreGetNoteContentRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetNoteContentResponse{}
	err := s.Client.Call("getNoteContent", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteSearchText(AuthenticationToken *string, Guid *string, NoteOnly *bool, TokenizeForIndexing *bool) (*string, error) {
	req := &NoteStoreGetNoteSearchTextRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		NoteOnly:            NoteOnly,
		TokenizeForIndexing: TokenizeForIndexing,
	}
	res := &NoteStoreGetNoteSearchTextResponse{}
	err := s.Client.Call("getNoteSearchText", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteTagNames(AuthenticationToken *string, Guid *string) ([]*string, error) {
	req := &NoteStoreGetNoteTagNamesRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetNoteTagNamesResponse{}
	err := s.Client.Call("getNoteTagNames", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNoteVersion(AuthenticationToken *string, NoteGuid *string, UpdateSequenceNum *int32, WithResourcesData *bool, WithResourcesRecognition *bool, WithResourcesAlternateData *bool) (*edamtypes.Note, error) {
	req := &NoteStoreGetNoteVersionRequest{
		AuthenticationToken:        AuthenticationToken,
		NoteGuid:                   NoteGuid,
		UpdateSequenceNum:          UpdateSequenceNum,
		WithResourcesData:          WithResourcesData,
		WithResourcesRecognition:   WithResourcesRecognition,
		WithResourcesAlternateData: WithResourcesAlternateData,
	}
	res := &NoteStoreGetNoteVersionResponse{}
	err := s.Client.Call("getNoteVersion", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetNotebook(AuthenticationToken *string, Guid *string) (*edamtypes.Notebook, error) {
	req := &NoteStoreGetNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetNotebookResponse{}
	err := s.Client.Call("getNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetPublicNotebook(UserId *int32, PublicUri *string) (*edamtypes.Notebook, error) {
	req := &NoteStoreGetPublicNotebookRequest{
		UserId:    UserId,
		PublicUri: PublicUri,
	}
	res := &NoteStoreGetPublicNotebookResponse{}
	err := s.Client.Call("getPublicNotebook", req, res)
	if err == nil {
		switch {
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResource(AuthenticationToken *string, Guid *string, WithData *bool, WithRecognition *bool, WithAttributes *bool, WithAlternateData *bool) (*edamtypes.Resource, error) {
	req := &NoteStoreGetResourceRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		WithData:            WithData,
		WithRecognition:     WithRecognition,
		WithAttributes:      WithAttributes,
		WithAlternateData:   WithAlternateData,
	}
	res := &NoteStoreGetResourceResponse{}
	err := s.Client.Call("getResource", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceAlternateData(AuthenticationToken *string, Guid *string) ([]byte, error) {
	req := &NoteStoreGetResourceAlternateDataRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceAlternateDataResponse{}
	err := s.Client.Call("getResourceAlternateData", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceApplicationData(AuthenticationToken *string, Guid *string) (*edamtypes.LazyMap, error) {
	req := &NoteStoreGetResourceApplicationDataRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceApplicationDataResponse{}
	err := s.Client.Call("getResourceApplicationData", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*string, error) {
	req := &NoteStoreGetResourceApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
	}
	res := &NoteStoreGetResourceApplicationDataEntryResponse{}
	err := s.Client.Call("getResourceApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceAttributes(AuthenticationToken *string, Guid *string) (*edamtypes.ResourceAttributes, error) {
	req := &NoteStoreGetResourceAttributesRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceAttributesResponse{}
	err := s.Client.Call("getResourceAttributes", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceByHash(AuthenticationToken *string, NoteGuid *string, ContentHash []byte, WithData *bool, WithRecognition *bool, WithAlternateData *bool) (*edamtypes.Resource, error) {
	req := &NoteStoreGetResourceByHashRequest{
		AuthenticationToken: AuthenticationToken,
		NoteGuid:            NoteGuid,
		ContentHash:         ContentHash,
		WithData:            WithData,
		WithRecognition:     WithRecognition,
		WithAlternateData:   WithAlternateData,
	}
	res := &NoteStoreGetResourceByHashResponse{}
	err := s.Client.Call("getResourceByHash", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceData(AuthenticationToken *string, Guid *string) ([]byte, error) {
	req := &NoteStoreGetResourceDataRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceDataResponse{}
	err := s.Client.Call("getResourceData", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceRecognition(AuthenticationToken *string, Guid *string) ([]byte, error) {
	req := &NoteStoreGetResourceRecognitionRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceRecognitionResponse{}
	err := s.Client.Call("getResourceRecognition", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetResourceSearchText(AuthenticationToken *string, Guid *string) (*string, error) {
	req := &NoteStoreGetResourceSearchTextRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetResourceSearchTextResponse{}
	err := s.Client.Call("getResourceSearchText", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetSearch(AuthenticationToken *string, Guid *string) (*edamtypes.SavedSearch, error) {
	req := &NoteStoreGetSearchRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetSearchResponse{}
	err := s.Client.Call("getSearch", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetSharedNotebookByAuth(AuthenticationToken *string) (*edamtypes.SharedNotebook, error) {
	req := &NoteStoreGetSharedNotebookByAuthRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreGetSharedNotebookByAuthResponse{}
	err := s.Client.Call("getSharedNotebookByAuth", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetSyncChunk(AuthenticationToken *string, AfterUSN *int32, MaxEntries *int32, FullSyncOnly *bool) (*SyncChunk, error) {
	req := &NoteStoreGetSyncChunkRequest{
		AuthenticationToken: AuthenticationToken,
		AfterUSN:            AfterUSN,
		MaxEntries:          MaxEntries,
		FullSyncOnly:        FullSyncOnly,
	}
	res := &NoteStoreGetSyncChunkResponse{}
	err := s.Client.Call("getSyncChunk", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetSyncState(AuthenticationToken *string) (*SyncState, error) {
	req := &NoteStoreGetSyncStateRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreGetSyncStateResponse{}
	err := s.Client.Call("getSyncState", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetSyncStateWithMetrics(AuthenticationToken *string, ClientMetrics *ClientUsageMetrics) (*SyncState, error) {
	req := &NoteStoreGetSyncStateWithMetricsRequest{
		AuthenticationToken: AuthenticationToken,
		ClientMetrics:       ClientMetrics,
	}
	res := &NoteStoreGetSyncStateWithMetricsResponse{}
	err := s.Client.Call("getSyncStateWithMetrics", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) GetTag(AuthenticationToken *string, Guid *string) (*edamtypes.Tag, error) {
	req := &NoteStoreGetTagRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreGetTagResponse{}
	err := s.Client.Call("getTag", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListLinkedNotebooks(AuthenticationToken *string) ([]*edamtypes.LinkedNotebook, error) {
	req := &NoteStoreListLinkedNotebooksRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreListLinkedNotebooksResponse{}
	err := s.Client.Call("listLinkedNotebooks", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListNoteVersions(AuthenticationToken *string, NoteGuid *string) ([]*NoteVersionId, error) {
	req := &NoteStoreListNoteVersionsRequest{
		AuthenticationToken: AuthenticationToken,
		NoteGuid:            NoteGuid,
	}
	res := &NoteStoreListNoteVersionsResponse{}
	err := s.Client.Call("listNoteVersions", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListNotebooks(AuthenticationToken *string) ([]*edamtypes.Notebook, error) {
	req := &NoteStoreListNotebooksRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreListNotebooksResponse{}
	err := s.Client.Call("listNotebooks", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListSearches(AuthenticationToken *string) ([]*edamtypes.SavedSearch, error) {
	req := &NoteStoreListSearchesRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreListSearchesResponse{}
	err := s.Client.Call("listSearches", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListSharedNotebooks(AuthenticationToken *string) ([]*edamtypes.SharedNotebook, error) {
	req := &NoteStoreListSharedNotebooksRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreListSharedNotebooksResponse{}
	err := s.Client.Call("listSharedNotebooks", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListTags(AuthenticationToken *string) ([]*edamtypes.Tag, error) {
	req := &NoteStoreListTagsRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &NoteStoreListTagsResponse{}
	err := s.Client.Call("listTags", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ListTagsByNotebook(AuthenticationToken *string, NotebookGuid *string) ([]*edamtypes.Tag, error) {
	req := &NoteStoreListTagsByNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		NotebookGuid:        NotebookGuid,
	}
	res := &NoteStoreListTagsByNotebookResponse{}
	err := s.Client.Call("listTagsByNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) SendMessageToSharedNotebookMembers(AuthenticationToken *string, NotebookGuid *string, MessageText *string, Recipients []*string) (*int32, error) {
	req := &NoteStoreSendMessageToSharedNotebookMembersRequest{
		AuthenticationToken: AuthenticationToken,
		NotebookGuid:        NotebookGuid,
		MessageText:         MessageText,
		Recipients:          Recipients,
	}
	res := &NoteStoreSendMessageToSharedNotebookMembersResponse{}
	err := s.Client.Call("sendMessageToSharedNotebookMembers", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) SetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string, Value *string) (*int32, error) {
	req := &NoteStoreSetNoteApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
		Value:               Value,
	}
	res := &NoteStoreSetNoteApplicationDataEntryResponse{}
	err := s.Client.Call("setNoteApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) SetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string, Value *string) (*int32, error) {
	req := &NoteStoreSetResourceApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
		Value:               Value,
	}
	res := &NoteStoreSetResourceApplicationDataEntryResponse{}
	err := s.Client.Call("setResourceApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) SetSharedNotebookRecipientSettings(AuthenticationToken *string, SharedNotebookId *int64, RecipientSettings *edamtypes.SharedNotebookRecipientSettings) (*int32, error) {
	req := &NoteStoreSetSharedNotebookRecipientSettingsRequest{
		AuthenticationToken: AuthenticationToken,
		SharedNotebookId:    SharedNotebookId,
		RecipientSettings:   RecipientSettings,
	}
	res := &NoteStoreSetSharedNotebookRecipientSettingsResponse{}
	err := s.Client.Call("setSharedNotebookRecipientSettings", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) ShareNote(AuthenticationToken *string, Guid *string) (*string, error) {
	req := &NoteStoreShareNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreShareNoteResponse{}
	err := s.Client.Call("shareNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) StopSharingNote(AuthenticationToken *string, Guid *string) error {
	req := &NoteStoreStopSharingNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreStopSharingNoteResponse{}
	err := s.Client.Call("stopSharingNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return err
}

func (s *NoteStoreClient) UnsetNoteApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*int32, error) {
	req := &NoteStoreUnsetNoteApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
	}
	res := &NoteStoreUnsetNoteApplicationDataEntryResponse{}
	err := s.Client.Call("unsetNoteApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UnsetResourceApplicationDataEntry(AuthenticationToken *string, Guid *string, Key *string) (*int32, error) {
	req := &NoteStoreUnsetResourceApplicationDataEntryRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
		Key:                 Key,
	}
	res := &NoteStoreUnsetResourceApplicationDataEntryResponse{}
	err := s.Client.Call("unsetResourceApplicationDataEntry", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UntagAll(AuthenticationToken *string, Guid *string) error {
	req := &NoteStoreUntagAllRequest{
		AuthenticationToken: AuthenticationToken,
		Guid:                Guid,
	}
	res := &NoteStoreUntagAllResponse{}
	err := s.Client.Call("untagAll", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return err
}

func (s *NoteStoreClient) UpdateLinkedNotebook(AuthenticationToken *string, LinkedNotebook *edamtypes.LinkedNotebook) (*int32, error) {
	req := &NoteStoreUpdateLinkedNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		LinkedNotebook:      LinkedNotebook,
	}
	res := &NoteStoreUpdateLinkedNotebookResponse{}
	err := s.Client.Call("updateLinkedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateNote(AuthenticationToken *string, Note *edamtypes.Note) (*edamtypes.Note, error) {
	req := &NoteStoreUpdateNoteRequest{
		AuthenticationToken: AuthenticationToken,
		Note:                Note,
	}
	res := &NoteStoreUpdateNoteResponse{}
	err := s.Client.Call("updateNote", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateNotebook(AuthenticationToken *string, Notebook *edamtypes.Notebook) (*int32, error) {
	req := &NoteStoreUpdateNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		Notebook:            Notebook,
	}
	res := &NoteStoreUpdateNotebookResponse{}
	err := s.Client.Call("updateNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateResource(AuthenticationToken *string, Resource *edamtypes.Resource) (*int32, error) {
	req := &NoteStoreUpdateResourceRequest{
		AuthenticationToken: AuthenticationToken,
		Resource:            Resource,
	}
	res := &NoteStoreUpdateResourceResponse{}
	err := s.Client.Call("updateResource", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateSearch(AuthenticationToken *string, Search *edamtypes.SavedSearch) (*int32, error) {
	req := &NoteStoreUpdateSearchRequest{
		AuthenticationToken: AuthenticationToken,
		Search:              Search,
	}
	res := &NoteStoreUpdateSearchResponse{}
	err := s.Client.Call("updateSearch", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateSharedNotebook(AuthenticationToken *string, SharedNotebook *edamtypes.SharedNotebook) (*int32, error) {
	req := &NoteStoreUpdateSharedNotebookRequest{
		AuthenticationToken: AuthenticationToken,
		SharedNotebook:      SharedNotebook,
	}
	res := &NoteStoreUpdateSharedNotebookResponse{}
	err := s.Client.Call("updateSharedNotebook", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *NoteStoreClient) UpdateTag(AuthenticationToken *string, Tag *edamtypes.Tag) (*int32, error) {
	req := &NoteStoreUpdateTagRequest{
		AuthenticationToken: AuthenticationToken,
		Tag:                 Tag,
	}
	res := &NoteStoreUpdateTagResponse{}
	err := s.Client.Call("updateTag", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		case res.NotFoundException != nil:
			err = res.NotFoundException
		}
	}
	return res.Value, err
}
