// This file is automatically generated. Do not modify.

package edamuserstore

import (
	"github.com/corps/evernote/edamerrors"
	"github.com/corps/evernote/edamtypes"
)

const (
	EdamVersionMajor = 1
	EdamVersionMinor = 25
)

type AuthenticationResult struct {
	CurrentTime              *int64          `thrift:"1,required" json:"currentTime"`
	AuthenticationToken      *string         `thrift:"2,required" json:"authenticationToken"`
	Expiration               *int64          `thrift:"3,required" json:"expiration"`
	User                     *edamtypes.User `thrift:"4" json:"user,omitempty"`
	PublicUserInfo           *PublicUserInfo `thrift:"5" json:"publicUserInfo,omitempty"`
	NoteStoreUrl             *string         `thrift:"6" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix          *string         `thrift:"7" json:"webApiUrlPrefix,omitempty"`
	SecondFactorRequired     *bool           `thrift:"8" json:"secondFactorRequired,omitempty"`
	SecondFactorDeliveryHint *string         `thrift:"9" json:"secondFactorDeliveryHint,omitempty"`
}

type BootstrapInfo struct {
	Profiles []*BootstrapProfile `thrift:"1,required" json:"profiles"`
}

type BootstrapProfile struct {
	Name     *string            `thrift:"1,required" json:"name"`
	Settings *BootstrapSettings `thrift:"2,required" json:"settings"`
}

type BootstrapSettings struct {
	ServiceHost             *string `thrift:"1,required" json:"serviceHost"`
	MarketingUrl            *string `thrift:"2,required" json:"marketingUrl"`
	SupportUrl              *string `thrift:"3,required" json:"supportUrl"`
	AccountEmailDomain      *string `thrift:"4,required" json:"accountEmailDomain"`
	EnableFacebookSharing   *bool   `thrift:"5" json:"enableFacebookSharing,omitempty"`
	EnableGiftSubscriptions *bool   `thrift:"6" json:"enableGiftSubscriptions,omitempty"`
	EnableSupportTickets    *bool   `thrift:"7" json:"enableSupportTickets,omitempty"`
	EnableSharedNotebooks   *bool   `thrift:"8" json:"enableSharedNotebooks,omitempty"`
	EnableSingleNoteSharing *bool   `thrift:"9" json:"enableSingleNoteSharing,omitempty"`
	EnableSponsoredAccounts *bool   `thrift:"10" json:"enableSponsoredAccounts,omitempty"`
	EnableTwitterSharing    *bool   `thrift:"11" json:"enableTwitterSharing,omitempty"`
	EnableLinkedInSharing   *bool   `thrift:"12" json:"enableLinkedInSharing,omitempty"`
	EnablePublicNotebooks   *bool   `thrift:"13" json:"enablePublicNotebooks,omitempty"`
}

type PublicUserInfo struct {
	UserId          *int32                    `thrift:"1,required" json:"userId"`
	ShardId         *string                   `thrift:"2,required" json:"shardId"`
	Privilege       *edamtypes.PrivilegeLevel `thrift:"3" json:"privilege,omitempty"`
	Username        *string                   `thrift:"4" json:"username,omitempty"`
	NoteStoreUrl    *string                   `thrift:"5" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix *string                   `thrift:"6" json:"webApiUrlPrefix,omitempty"`
}

type RPCClient interface {
	Call(method string, request interface{}, response interface{}) error
}

type UserStore interface {
	Authenticate(Username *string, Password *string, ConsumerKey *string, ConsumerSecret *string, SupportsTwoFactor *bool) (*AuthenticationResult, error)
	AuthenticateLongSession(Username *string, Password *string, ConsumerKey *string, ConsumerSecret *string, DeviceIdentifier *string, DeviceDescription *string, SupportsTwoFactor *bool) (*AuthenticationResult, error)
	AuthenticateToBusiness(AuthenticationToken *string) (*AuthenticationResult, error)
	CheckVersion(ClientName *string, EdamVersionMajor *int16, EdamVersionMinor *int16) (*bool, error)
	CompleteTwoFactorAuthentication(AuthenticationToken *string, OneTimeCode *string, DeviceIdentifier *string, DeviceDescription *string) (*AuthenticationResult, error)
	GetBootstrapInfo(Locale *string) (*BootstrapInfo, error)
	GetNoteStoreUrl(AuthenticationToken *string) (*string, error)
	GetPremiumInfo(AuthenticationToken *string) (*edamtypes.PremiumInfo, error)
	GetPublicUserInfo(Username *string) (*PublicUserInfo, error)
	GetUser(AuthenticationToken *string) (*edamtypes.User, error)
	RefreshAuthentication(AuthenticationToken *string) (*AuthenticationResult, error)
	RevokeLongSession(AuthenticationToken *string) error
}

type UserStoreServer struct {
	Implementation UserStore
}

func (s *UserStoreServer) Authenticate(req *UserStoreAuthenticateRequest, res *UserStoreAuthenticateResponse) error {
	val, err := s.Implementation.Authenticate(req.Username, req.Password, req.ConsumerKey, req.ConsumerSecret, req.SupportsTwoFactor)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) AuthenticateLongSession(req *UserStoreAuthenticateLongSessionRequest, res *UserStoreAuthenticateLongSessionResponse) error {
	val, err := s.Implementation.AuthenticateLongSession(req.Username, req.Password, req.ConsumerKey, req.ConsumerSecret, req.DeviceIdentifier, req.DeviceDescription, req.SupportsTwoFactor)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) AuthenticateToBusiness(req *UserStoreAuthenticateToBusinessRequest, res *UserStoreAuthenticateToBusinessResponse) error {
	val, err := s.Implementation.AuthenticateToBusiness(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) CheckVersion(req *UserStoreCheckVersionRequest, res *UserStoreCheckVersionResponse) error {
	val, err := s.Implementation.CheckVersion(req.ClientName, req.EdamVersionMajor, req.EdamVersionMinor)
	res.Value = val
	return err
}

func (s *UserStoreServer) CompleteTwoFactorAuthentication(req *UserStoreCompleteTwoFactorAuthenticationRequest, res *UserStoreCompleteTwoFactorAuthenticationResponse) error {
	val, err := s.Implementation.CompleteTwoFactorAuthentication(req.AuthenticationToken, req.OneTimeCode, req.DeviceIdentifier, req.DeviceDescription)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) GetBootstrapInfo(req *UserStoreGetBootstrapInfoRequest, res *UserStoreGetBootstrapInfoResponse) error {
	val, err := s.Implementation.GetBootstrapInfo(req.Locale)
	res.Value = val
	return err
}

func (s *UserStoreServer) GetNoteStoreUrl(req *UserStoreGetNoteStoreUrlRequest, res *UserStoreGetNoteStoreUrlResponse) error {
	val, err := s.Implementation.GetNoteStoreUrl(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) GetPremiumInfo(req *UserStoreGetPremiumInfoRequest, res *UserStoreGetPremiumInfoResponse) error {
	val, err := s.Implementation.GetPremiumInfo(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) GetPublicUserInfo(req *UserStoreGetPublicUserInfoRequest, res *UserStoreGetPublicUserInfoResponse) error {
	val, err := s.Implementation.GetPublicUserInfo(req.Username)
	switch e := err.(type) {
	case *edamerrors.EDAMNotFoundException:
		res.NotFoundException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) GetUser(req *UserStoreGetUserRequest, res *UserStoreGetUserResponse) error {
	val, err := s.Implementation.GetUser(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) RefreshAuthentication(req *UserStoreRefreshAuthenticationRequest, res *UserStoreRefreshAuthenticationResponse) error {
	val, err := s.Implementation.RefreshAuthentication(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *UserStoreServer) RevokeLongSession(req *UserStoreRevokeLongSessionRequest, res *UserStoreRevokeLongSessionResponse) error {
	err := s.Implementation.RevokeLongSession(req.AuthenticationToken)
	switch e := err.(type) {
	case *edamerrors.EDAMUserException:
		res.UserException = e
		err = nil
	case *edamerrors.EDAMSystemException:
		res.SystemException = e
		err = nil
	}
	return err
}

type UserStoreAuthenticateRequest struct {
	Username          *string `thrift:"1,required" json:"username"`
	Password          *string `thrift:"2,required" json:"password"`
	ConsumerKey       *string `thrift:"3,required" json:"consumerKey"`
	ConsumerSecret    *string `thrift:"4,required" json:"consumerSecret"`
	SupportsTwoFactor *bool   `thrift:"5,required" json:"supportsTwoFactor"`
}

type UserStoreAuthenticateResponse struct {
	Value           *AuthenticationResult           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreAuthenticateLongSessionRequest struct {
	Username          *string `thrift:"1,required" json:"username"`
	Password          *string `thrift:"2,required" json:"password"`
	ConsumerKey       *string `thrift:"3,required" json:"consumerKey"`
	ConsumerSecret    *string `thrift:"4,required" json:"consumerSecret"`
	DeviceIdentifier  *string `thrift:"5,required" json:"deviceIdentifier"`
	DeviceDescription *string `thrift:"6,required" json:"deviceDescription"`
	SupportsTwoFactor *bool   `thrift:"7,required" json:"supportsTwoFactor"`
}

type UserStoreAuthenticateLongSessionResponse struct {
	Value           *AuthenticationResult           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreAuthenticateToBusinessRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreAuthenticateToBusinessResponse struct {
	Value           *AuthenticationResult           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreCheckVersionRequest struct {
	ClientName       *string `thrift:"1,required" json:"clientName"`
	EdamVersionMajor *int16  `thrift:"2,required" json:"edamVersionMajor"`
	EdamVersionMinor *int16  `thrift:"3,required" json:"edamVersionMinor"`
}

type UserStoreCheckVersionResponse struct {
	Value *bool `thrift:"0,required" json:"value"`
}

type UserStoreCompleteTwoFactorAuthenticationRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
	OneTimeCode         *string `thrift:"2,required" json:"oneTimeCode"`
	DeviceIdentifier    *string `thrift:"3,required" json:"deviceIdentifier"`
	DeviceDescription   *string `thrift:"4,required" json:"deviceDescription"`
}

type UserStoreCompleteTwoFactorAuthenticationResponse struct {
	Value           *AuthenticationResult           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreGetBootstrapInfoRequest struct {
	Locale *string `thrift:"1,required" json:"locale"`
}

type UserStoreGetBootstrapInfoResponse struct {
	Value *BootstrapInfo `thrift:"0,required" json:"value"`
}

type UserStoreGetNoteStoreUrlRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreGetNoteStoreUrlResponse struct {
	Value           *string                         `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreGetPremiumInfoRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreGetPremiumInfoResponse struct {
	Value           *edamtypes.PremiumInfo          `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreGetPublicUserInfoRequest struct {
	Username *string `thrift:"1,required" json:"username"`
}

type UserStoreGetPublicUserInfoResponse struct {
	Value             *PublicUserInfo                   `thrift:"0" json:"value,omitempty"`
	NotFoundException *edamerrors.EDAMNotFoundException `thrift:"1" json:"notFoundException,omitempty"`
	SystemException   *edamerrors.EDAMSystemException   `thrift:"2" json:"systemException,omitempty"`
	UserException     *edamerrors.EDAMUserException     `thrift:"3" json:"userException,omitempty"`
}

type UserStoreGetUserRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreGetUserResponse struct {
	Value           *edamtypes.User                 `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreRefreshAuthenticationRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreRefreshAuthenticationResponse struct {
	Value           *AuthenticationResult           `thrift:"0" json:"value,omitempty"`
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreRevokeLongSessionRequest struct {
	AuthenticationToken *string `thrift:"1,required" json:"authenticationToken"`
}

type UserStoreRevokeLongSessionResponse struct {
	UserException   *edamerrors.EDAMUserException   `thrift:"1" json:"userException,omitempty"`
	SystemException *edamerrors.EDAMSystemException `thrift:"2" json:"systemException,omitempty"`
}

type UserStoreClient struct {
	Client RPCClient
}

func (s *UserStoreClient) Authenticate(Username *string, Password *string, ConsumerKey *string, ConsumerSecret *string, SupportsTwoFactor *bool) (*AuthenticationResult, error) {
	req := &UserStoreAuthenticateRequest{
		Username:          Username,
		Password:          Password,
		ConsumerKey:       ConsumerKey,
		ConsumerSecret:    ConsumerSecret,
		SupportsTwoFactor: SupportsTwoFactor,
	}
	res := &UserStoreAuthenticateResponse{}
	err := s.Client.Call("authenticate", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) AuthenticateLongSession(Username *string, Password *string, ConsumerKey *string, ConsumerSecret *string, DeviceIdentifier *string, DeviceDescription *string, SupportsTwoFactor *bool) (*AuthenticationResult, error) {
	req := &UserStoreAuthenticateLongSessionRequest{
		Username:          Username,
		Password:          Password,
		ConsumerKey:       ConsumerKey,
		ConsumerSecret:    ConsumerSecret,
		DeviceIdentifier:  DeviceIdentifier,
		DeviceDescription: DeviceDescription,
		SupportsTwoFactor: SupportsTwoFactor,
	}
	res := &UserStoreAuthenticateLongSessionResponse{}
	err := s.Client.Call("authenticateLongSession", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) AuthenticateToBusiness(AuthenticationToken *string) (*AuthenticationResult, error) {
	req := &UserStoreAuthenticateToBusinessRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreAuthenticateToBusinessResponse{}
	err := s.Client.Call("authenticateToBusiness", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) CheckVersion(ClientName *string, EdamVersionMajor *int16, EdamVersionMinor *int16) (*bool, error) {
	req := &UserStoreCheckVersionRequest{
		ClientName:       ClientName,
		EdamVersionMajor: EdamVersionMajor,
		EdamVersionMinor: EdamVersionMinor,
	}
	res := &UserStoreCheckVersionResponse{}
	err := s.Client.Call("checkVersion", req, res)
	return res.Value, err
}

func (s *UserStoreClient) CompleteTwoFactorAuthentication(AuthenticationToken *string, OneTimeCode *string, DeviceIdentifier *string, DeviceDescription *string) (*AuthenticationResult, error) {
	req := &UserStoreCompleteTwoFactorAuthenticationRequest{
		AuthenticationToken: AuthenticationToken,
		OneTimeCode:         OneTimeCode,
		DeviceIdentifier:    DeviceIdentifier,
		DeviceDescription:   DeviceDescription,
	}
	res := &UserStoreCompleteTwoFactorAuthenticationResponse{}
	err := s.Client.Call("completeTwoFactorAuthentication", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) GetBootstrapInfo(Locale *string) (*BootstrapInfo, error) {
	req := &UserStoreGetBootstrapInfoRequest{
		Locale: Locale,
	}
	res := &UserStoreGetBootstrapInfoResponse{}
	err := s.Client.Call("getBootstrapInfo", req, res)
	return res.Value, err
}

func (s *UserStoreClient) GetNoteStoreUrl(AuthenticationToken *string) (*string, error) {
	req := &UserStoreGetNoteStoreUrlRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreGetNoteStoreUrlResponse{}
	err := s.Client.Call("getNoteStoreUrl", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) GetPremiumInfo(AuthenticationToken *string) (*edamtypes.PremiumInfo, error) {
	req := &UserStoreGetPremiumInfoRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreGetPremiumInfoResponse{}
	err := s.Client.Call("getPremiumInfo", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) GetPublicUserInfo(Username *string) (*PublicUserInfo, error) {
	req := &UserStoreGetPublicUserInfoRequest{
		Username: Username,
	}
	res := &UserStoreGetPublicUserInfoResponse{}
	err := s.Client.Call("getPublicUserInfo", req, res)
	if err == nil {
		switch {
		case res.NotFoundException != nil:
			err = res.NotFoundException
		case res.SystemException != nil:
			err = res.SystemException
		case res.UserException != nil:
			err = res.UserException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) GetUser(AuthenticationToken *string) (*edamtypes.User, error) {
	req := &UserStoreGetUserRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreGetUserResponse{}
	err := s.Client.Call("getUser", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) RefreshAuthentication(AuthenticationToken *string) (*AuthenticationResult, error) {
	req := &UserStoreRefreshAuthenticationRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreRefreshAuthenticationResponse{}
	err := s.Client.Call("refreshAuthentication", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return res.Value, err
}

func (s *UserStoreClient) RevokeLongSession(AuthenticationToken *string) error {
	req := &UserStoreRevokeLongSessionRequest{
		AuthenticationToken: AuthenticationToken,
	}
	res := &UserStoreRevokeLongSessionResponse{}
	err := s.Client.Call("revokeLongSession", req, res)
	if err == nil {
		switch {
		case res.UserException != nil:
			err = res.UserException
		case res.SystemException != nil:
			err = res.SystemException
		}
	}
	return err
}
